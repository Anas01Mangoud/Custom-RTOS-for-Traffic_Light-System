
NTI_Jan22_RTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000001f  00800060  00800060  00000e42  2**0
                  ALLOC
  2 .stab         000017d0  00000000  00000000  00000e44  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b27  00000000  00000000  00002614  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 a1 01 	jmp	0x342	; 0x342 <__vector_10>
  2c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	af 37       	cpi	r26, 0x7F	; 127
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 41 06 	call	0xc82	; 0xc82 <main>
  74:	0c 94 e5 06 	jmp	0xdca	; 0xdca <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <RTOS_VidInit>:
#include"RTOS_Config.h"

Task_t Tasks_Stack[NUM_OF_TASKS]={{NULL}};

void RTOS_VidInit(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	0f 92       	push	r0
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_u8SysTickCounts;
	/* Set CallBack Function To CTC Interrupt*/
	TIMER0_VidCTC_SetCallBack(&RTOS_VidSchedular);
  86:	88 e9       	ldi	r24, 0x98	; 152
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <TIMER0_VidCTC_SetCallBack>
	/* Set CTC Register Value */
	Loc_u8SysTickCounts=(SYSTICK_MS*RTOS_FCPU_KHZ)/RTOS_TIMER_Prescaler;
  8e:	87 e0       	ldi	r24, 0x07	; 7
  90:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_VidSetCTCValue(Loc_u8SysTickCounts);
  92:	89 81       	ldd	r24, Y+1	; 0x01
  94:	0e 94 42 01 	call	0x284	; 0x284 <TIMER0_VidSetCTCValue>
	/* Timer Initialization --> CTC Mode*/
	TIMER0_VidInit();
  98:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <TIMER0_VidInit>
	/* Enable To GI */
	MGIE_VidEnable();
  9c:	0e 94 ce 01 	call	0x39c	; 0x39c <MGIE_VidEnable>
}
  a0:	0f 90       	pop	r0
  a2:	cf 91       	pop	r28
  a4:	df 91       	pop	r29
  a6:	08 95       	ret

000000a8 <RTOS_VidCreateTask>:
void RTOS_VidCreateTask(void(*pv_PtrToFun)(void),u32 Copy_u32Periodicity,u8 Copy_u8Priority)
{
  a8:	df 93       	push	r29
  aa:	cf 93       	push	r28
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
  b0:	27 97       	sbiw	r28, 0x07	; 7
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	f8 94       	cli
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	cd bf       	out	0x3d, r28	; 61
  bc:	9a 83       	std	Y+2, r25	; 0x02
  be:	89 83       	std	Y+1, r24	; 0x01
  c0:	4b 83       	std	Y+3, r20	; 0x03
  c2:	5c 83       	std	Y+4, r21	; 0x04
  c4:	6d 83       	std	Y+5, r22	; 0x05
  c6:	7e 83       	std	Y+6, r23	; 0x06
  c8:	2f 83       	std	Y+7, r18	; 0x07
	Tasks_Stack[Copy_u8Priority].Function=pv_PtrToFun;
  ca:	8f 81       	ldd	r24, Y+7	; 0x07
  cc:	28 2f       	mov	r18, r24
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	c9 01       	movw	r24, r18
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	82 1b       	sub	r24, r18
  e0:	93 0b       	sbc	r25, r19
  e2:	fc 01       	movw	r30, r24
  e4:	e0 5a       	subi	r30, 0xA0	; 160
  e6:	ff 4f       	sbci	r31, 0xFF	; 255
  e8:	89 81       	ldd	r24, Y+1	; 0x01
  ea:	9a 81       	ldd	r25, Y+2	; 0x02
  ec:	91 83       	std	Z+1, r25	; 0x01
  ee:	80 83       	st	Z, r24
	Tasks_Stack[Copy_u8Priority].Periodicity=Copy_u32Periodicity;
  f0:	8f 81       	ldd	r24, Y+7	; 0x07
  f2:	28 2f       	mov	r18, r24
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	c9 01       	movw	r24, r18
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	82 1b       	sub	r24, r18
 106:	93 0b       	sbc	r25, r19
 108:	fc 01       	movw	r30, r24
 10a:	ee 59       	subi	r30, 0x9E	; 158
 10c:	ff 4f       	sbci	r31, 0xFF	; 255
 10e:	8b 81       	ldd	r24, Y+3	; 0x03
 110:	9c 81       	ldd	r25, Y+4	; 0x04
 112:	ad 81       	ldd	r26, Y+5	; 0x05
 114:	be 81       	ldd	r27, Y+6	; 0x06
 116:	80 83       	st	Z, r24
 118:	91 83       	std	Z+1, r25	; 0x01
 11a:	a2 83       	std	Z+2, r26	; 0x02
 11c:	b3 83       	std	Z+3, r27	; 0x03
}
 11e:	27 96       	adiw	r28, 0x07	; 7
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	f8 94       	cli
 124:	de bf       	out	0x3e, r29	; 62
 126:	0f be       	out	0x3f, r0	; 63
 128:	cd bf       	out	0x3d, r28	; 61
 12a:	cf 91       	pop	r28
 12c:	df 91       	pop	r29
 12e:	08 95       	ret

00000130 <RTOS_VidSchedular>:
void RTOS_VidSchedular(void)
{
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	df 93       	push	r29
 13a:	cf 93       	push	r28
 13c:	0f 92       	push	r0
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
	static u32  SysTickCount=0;
	u8 Loc_u8Count;

	SysTickCount++;
 142:	80 91 75 00 	lds	r24, 0x0075
 146:	90 91 76 00 	lds	r25, 0x0076
 14a:	a0 91 77 00 	lds	r26, 0x0077
 14e:	b0 91 78 00 	lds	r27, 0x0078
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	a1 1d       	adc	r26, r1
 156:	b1 1d       	adc	r27, r1
 158:	80 93 75 00 	sts	0x0075, r24
 15c:	90 93 76 00 	sts	0x0076, r25
 160:	a0 93 77 00 	sts	0x0077, r26
 164:	b0 93 78 00 	sts	0x0078, r27

	for(Loc_u8Count=0;Loc_u8Count<NUM_OF_TASKS;Loc_u8Count++)
 168:	19 82       	std	Y+1, r1	; 0x01
 16a:	3b c0       	rjmp	.+118    	; 0x1e2 <RTOS_VidSchedular+0xb2>
	{
		if(SysTickCount%Tasks_Stack[Loc_u8Count].Periodicity==0)
 16c:	e0 90 75 00 	lds	r14, 0x0075
 170:	f0 90 76 00 	lds	r15, 0x0076
 174:	00 91 77 00 	lds	r16, 0x0077
 178:	10 91 78 00 	lds	r17, 0x0078
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	28 2f       	mov	r18, r24
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	c9 01       	movw	r24, r18
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	82 1b       	sub	r24, r18
 192:	93 0b       	sbc	r25, r19
 194:	fc 01       	movw	r30, r24
 196:	ee 59       	subi	r30, 0x9E	; 158
 198:	ff 4f       	sbci	r31, 0xFF	; 255
 19a:	20 81       	ld	r18, Z
 19c:	31 81       	ldd	r19, Z+1	; 0x01
 19e:	42 81       	ldd	r20, Z+2	; 0x02
 1a0:	53 81       	ldd	r21, Z+3	; 0x03
 1a2:	c8 01       	movw	r24, r16
 1a4:	b7 01       	movw	r22, r14
 1a6:	0e 94 c3 06 	call	0xd86	; 0xd86 <__udivmodsi4>
 1aa:	dc 01       	movw	r26, r24
 1ac:	cb 01       	movw	r24, r22
 1ae:	00 97       	sbiw	r24, 0x00	; 0
 1b0:	a1 05       	cpc	r26, r1
 1b2:	b1 05       	cpc	r27, r1
 1b4:	99 f4       	brne	.+38     	; 0x1dc <RTOS_VidSchedular+0xac>
		{
			Tasks_Stack[Loc_u8Count].Function();
 1b6:	89 81       	ldd	r24, Y+1	; 0x01
 1b8:	28 2f       	mov	r18, r24
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	c9 01       	movw	r24, r18
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	82 1b       	sub	r24, r18
 1cc:	93 0b       	sbc	r25, r19
 1ce:	fc 01       	movw	r30, r24
 1d0:	e0 5a       	subi	r30, 0xA0	; 160
 1d2:	ff 4f       	sbci	r31, 0xFF	; 255
 1d4:	01 90       	ld	r0, Z+
 1d6:	f0 81       	ld	r31, Z
 1d8:	e0 2d       	mov	r30, r0
 1da:	09 95       	icall
	static u32  SysTickCount=0;
	u8 Loc_u8Count;

	SysTickCount++;

	for(Loc_u8Count=0;Loc_u8Count<NUM_OF_TASKS;Loc_u8Count++)
 1dc:	89 81       	ldd	r24, Y+1	; 0x01
 1de:	8f 5f       	subi	r24, 0xFF	; 255
 1e0:	89 83       	std	Y+1, r24	; 0x01
 1e2:	89 81       	ldd	r24, Y+1	; 0x01
 1e4:	83 30       	cpi	r24, 0x03	; 3
 1e6:	10 f2       	brcs	.-124    	; 0x16c <RTOS_VidSchedular+0x3c>
		else
		{
			/*Do Nothing*/
		}
	}
}
 1e8:	0f 90       	pop	r0
 1ea:	cf 91       	pop	r28
 1ec:	df 91       	pop	r29
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	ff 90       	pop	r15
 1f4:	ef 90       	pop	r14
 1f6:	08 95       	ret

000001f8 <TIMER0_VidInit>:

void (*TIMER0_CallBack)(void);

/*Timer0 Initialization*/
void TIMER0_VidInit(void)
{
 1f8:	df 93       	push	r29
 1fa:	cf 93       	push	r28
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler */
	TCCR0&=0xF8;
 200:	a3 e5       	ldi	r26, 0x53	; 83
 202:	b0 e0       	ldi	r27, 0x00	; 0
 204:	e3 e5       	ldi	r30, 0x53	; 83
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	88 7f       	andi	r24, 0xF8	; 248
 20c:	8c 93       	st	X, r24
	TCCR0|=TIMER_SET_PRESCALER;
 20e:	a3 e5       	ldi	r26, 0x53	; 83
 210:	b0 e0       	ldi	r27, 0x00	; 0
 212:	e3 e5       	ldi	r30, 0x53	; 83
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	85 60       	ori	r24, 0x05	; 5
 21a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,3);
	/*Timer Overflow Interrupt Enable*/
	SET_BIT(TIMSK,0);

#elif TIMER0_SET_MODE == TIMER0_CTC_MODE
	CLR_BIT(TCCR0,6);
 21c:	a3 e5       	ldi	r26, 0x53	; 83
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	e3 e5       	ldi	r30, 0x53	; 83
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	8f 7b       	andi	r24, 0xBF	; 191
 228:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);
 22a:	a3 e5       	ldi	r26, 0x53	; 83
 22c:	b0 e0       	ldi	r27, 0x00	; 0
 22e:	e3 e5       	ldi	r30, 0x53	; 83
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	88 60       	ori	r24, 0x08	; 8
 236:	8c 93       	st	X, r24
#if TIMER0_SET_CTC_INTERRUPT == TIMER0_CTC_INTERRUPT_ENABLED
	SET_BIT(TIMSK,1);
 238:	a9 e5       	ldi	r26, 0x59	; 89
 23a:	b0 e0       	ldi	r27, 0x00	; 0
 23c:	e9 e5       	ldi	r30, 0x59	; 89
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	82 60       	ori	r24, 0x02	; 2
 244:	8c 93       	st	X, r24
	CLR_BIT(TIMSK,1);
#else
#error "TIMER0 CTC Interrupt Mode is not valid..."
#endif
#if TIMER0_SET_OC0_PIN_MODE == TIMER0_OC0_PIN_DISCONNECTED
	CLR_BIT(TCCR0,5);
 246:	a3 e5       	ldi	r26, 0x53	; 83
 248:	b0 e0       	ldi	r27, 0x00	; 0
 24a:	e3 e5       	ldi	r30, 0x53	; 83
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	8f 7d       	andi	r24, 0xDF	; 223
 252:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,4);
 254:	a3 e5       	ldi	r26, 0x53	; 83
 256:	b0 e0       	ldi	r27, 0x00	; 0
 258:	e3 e5       	ldi	r30, 0x53	; 83
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	8f 7e       	andi	r24, 0xEF	; 239
 260:	8c 93       	st	X, r24
#endif
#else
#error "TIMER0 Mode is not valid..."
#endif

}
 262:	cf 91       	pop	r28
 264:	df 91       	pop	r29
 266:	08 95       	ret

00000268 <TIMER0_VidSetPreload>:
/*Set Preload Function*/
void TIMER0_VidSetPreload(u8 Copy_u8Preload)
{
 268:	df 93       	push	r29
 26a:	cf 93       	push	r28
 26c:	0f 92       	push	r0
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
 272:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Copy_u8Preload;
 274:	e2 e5       	ldi	r30, 0x52	; 82
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	89 81       	ldd	r24, Y+1	; 0x01
 27a:	80 83       	st	Z, r24
}
 27c:	0f 90       	pop	r0
 27e:	cf 91       	pop	r28
 280:	df 91       	pop	r29
 282:	08 95       	ret

00000284 <TIMER0_VidSetCTCValue>:
/*Set CTC Value Function*/
void TIMER0_VidSetCTCValue(u8 Copy_u8CTCValue)
{
 284:	df 93       	push	r29
 286:	cf 93       	push	r28
 288:	0f 92       	push	r0
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
 28e:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8CTCValue;
 290:	ec e5       	ldi	r30, 0x5C	; 92
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	89 81       	ldd	r24, Y+1	; 0x01
 296:	80 83       	st	Z, r24
}
 298:	0f 90       	pop	r0
 29a:	cf 91       	pop	r28
 29c:	df 91       	pop	r29
 29e:	08 95       	ret

000002a0 <TIMER0_VidOVF_SetCallBack>:
void TIMER0_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
 2a0:	df 93       	push	r29
 2a2:	cf 93       	push	r28
 2a4:	00 d0       	rcall	.+0      	; 0x2a6 <TIMER0_VidOVF_SetCallBack+0x6>
 2a6:	cd b7       	in	r28, 0x3d	; 61
 2a8:	de b7       	in	r29, 0x3e	; 62
 2aa:	9a 83       	std	Y+2, r25	; 0x02
 2ac:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack=Copy_VidCallBack;
 2ae:	89 81       	ldd	r24, Y+1	; 0x01
 2b0:	9a 81       	ldd	r25, Y+2	; 0x02
 2b2:	90 93 7e 00 	sts	0x007E, r25
 2b6:	80 93 7d 00 	sts	0x007D, r24
}
 2ba:	0f 90       	pop	r0
 2bc:	0f 90       	pop	r0
 2be:	cf 91       	pop	r28
 2c0:	df 91       	pop	r29
 2c2:	08 95       	ret

000002c4 <TIMER0_VidCTC_SetCallBack>:
void TIMER0_VidCTC_SetCallBack(void(*Copy_VidCallBack)(void))
{
 2c4:	df 93       	push	r29
 2c6:	cf 93       	push	r28
 2c8:	00 d0       	rcall	.+0      	; 0x2ca <TIMER0_VidCTC_SetCallBack+0x6>
 2ca:	cd b7       	in	r28, 0x3d	; 61
 2cc:	de b7       	in	r29, 0x3e	; 62
 2ce:	9a 83       	std	Y+2, r25	; 0x02
 2d0:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack=Copy_VidCallBack;
 2d2:	89 81       	ldd	r24, Y+1	; 0x01
 2d4:	9a 81       	ldd	r25, Y+2	; 0x02
 2d6:	90 93 7e 00 	sts	0x007E, r25
 2da:	80 93 7d 00 	sts	0x007D, r24
}
 2de:	0f 90       	pop	r0
 2e0:	0f 90       	pop	r0
 2e2:	cf 91       	pop	r28
 2e4:	df 91       	pop	r29
 2e6:	08 95       	ret

000002e8 <__vector_11>:
void __vector_11(void)   __attribute__((signal));
void __vector_11(void)
{
 2e8:	1f 92       	push	r1
 2ea:	0f 92       	push	r0
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	0f 92       	push	r0
 2f0:	11 24       	eor	r1, r1
 2f2:	2f 93       	push	r18
 2f4:	3f 93       	push	r19
 2f6:	4f 93       	push	r20
 2f8:	5f 93       	push	r21
 2fa:	6f 93       	push	r22
 2fc:	7f 93       	push	r23
 2fe:	8f 93       	push	r24
 300:	9f 93       	push	r25
 302:	af 93       	push	r26
 304:	bf 93       	push	r27
 306:	ef 93       	push	r30
 308:	ff 93       	push	r31
 30a:	df 93       	push	r29
 30c:	cf 93       	push	r28
 30e:	cd b7       	in	r28, 0x3d	; 61
 310:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
 312:	e0 91 7d 00 	lds	r30, 0x007D
 316:	f0 91 7e 00 	lds	r31, 0x007E
 31a:	09 95       	icall
}
 31c:	cf 91       	pop	r28
 31e:	df 91       	pop	r29
 320:	ff 91       	pop	r31
 322:	ef 91       	pop	r30
 324:	bf 91       	pop	r27
 326:	af 91       	pop	r26
 328:	9f 91       	pop	r25
 32a:	8f 91       	pop	r24
 32c:	7f 91       	pop	r23
 32e:	6f 91       	pop	r22
 330:	5f 91       	pop	r21
 332:	4f 91       	pop	r20
 334:	3f 91       	pop	r19
 336:	2f 91       	pop	r18
 338:	0f 90       	pop	r0
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	0f 90       	pop	r0
 33e:	1f 90       	pop	r1
 340:	18 95       	reti

00000342 <__vector_10>:
void __vector_10(void)   __attribute__((signal));
void __vector_10(void)
{
 342:	1f 92       	push	r1
 344:	0f 92       	push	r0
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	0f 92       	push	r0
 34a:	11 24       	eor	r1, r1
 34c:	2f 93       	push	r18
 34e:	3f 93       	push	r19
 350:	4f 93       	push	r20
 352:	5f 93       	push	r21
 354:	6f 93       	push	r22
 356:	7f 93       	push	r23
 358:	8f 93       	push	r24
 35a:	9f 93       	push	r25
 35c:	af 93       	push	r26
 35e:	bf 93       	push	r27
 360:	ef 93       	push	r30
 362:	ff 93       	push	r31
 364:	df 93       	push	r29
 366:	cf 93       	push	r28
 368:	cd b7       	in	r28, 0x3d	; 61
 36a:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
 36c:	e0 91 7d 00 	lds	r30, 0x007D
 370:	f0 91 7e 00 	lds	r31, 0x007E
 374:	09 95       	icall
}
 376:	cf 91       	pop	r28
 378:	df 91       	pop	r29
 37a:	ff 91       	pop	r31
 37c:	ef 91       	pop	r30
 37e:	bf 91       	pop	r27
 380:	af 91       	pop	r26
 382:	9f 91       	pop	r25
 384:	8f 91       	pop	r24
 386:	7f 91       	pop	r23
 388:	6f 91       	pop	r22
 38a:	5f 91       	pop	r21
 38c:	4f 91       	pop	r20
 38e:	3f 91       	pop	r19
 390:	2f 91       	pop	r18
 392:	0f 90       	pop	r0
 394:	0f be       	out	0x3f, r0	; 63
 396:	0f 90       	pop	r0
 398:	1f 90       	pop	r1
 39a:	18 95       	reti

0000039c <MGIE_VidEnable>:

#include"MGIE_Private.h"

/*GIE Enable Function*/
void MGIE_VidEnable(void)
{
 39c:	df 93       	push	r29
 39e:	cf 93       	push	r28
 3a0:	cd b7       	in	r28, 0x3d	; 61
 3a2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
 3a4:	af e5       	ldi	r26, 0x5F	; 95
 3a6:	b0 e0       	ldi	r27, 0x00	; 0
 3a8:	ef e5       	ldi	r30, 0x5F	; 95
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	80 81       	ld	r24, Z
 3ae:	80 68       	ori	r24, 0x80	; 128
 3b0:	8c 93       	st	X, r24
}
 3b2:	cf 91       	pop	r28
 3b4:	df 91       	pop	r29
 3b6:	08 95       	ret

000003b8 <MGIE_VidDisable>:
/*GIE Disable Function*/
void MGIE_VidDisable(void)
{
 3b8:	df 93       	push	r29
 3ba:	cf 93       	push	r28
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
 3c0:	af e5       	ldi	r26, 0x5F	; 95
 3c2:	b0 e0       	ldi	r27, 0x00	; 0
 3c4:	ef e5       	ldi	r30, 0x5F	; 95
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	8f 77       	andi	r24, 0x7F	; 127
 3cc:	8c 93       	st	X, r24
}
 3ce:	cf 91       	pop	r28
 3d0:	df 91       	pop	r29
 3d2:	08 95       	ret

000003d4 <MDIO_Error_State_SetPinDirection>:
#include"MDIO_Private.h"
#include"MDIO_Interface.h"

/*Set Pin Direction Function */
Error_State MDIO_Error_State_SetPinDirection(u8 Copy_u8PinNumber,u8  Copy_u8PortNumber,u8 Copy_u8PinDirection)
{
 3d4:	df 93       	push	r29
 3d6:	cf 93       	push	r28
 3d8:	00 d0       	rcall	.+0      	; 0x3da <MDIO_Error_State_SetPinDirection+0x6>
 3da:	00 d0       	rcall	.+0      	; 0x3dc <MDIO_Error_State_SetPinDirection+0x8>
 3dc:	00 d0       	rcall	.+0      	; 0x3de <MDIO_Error_State_SetPinDirection+0xa>
 3de:	cd b7       	in	r28, 0x3d	; 61
 3e0:	de b7       	in	r29, 0x3e	; 62
 3e2:	8a 83       	std	Y+2, r24	; 0x02
 3e4:	6b 83       	std	Y+3, r22	; 0x03
 3e6:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
 3ec:	8a 81       	ldd	r24, Y+2	; 0x02
 3ee:	88 30       	cpi	r24, 0x08	; 8
 3f0:	08 f0       	brcs	.+2      	; 0x3f4 <MDIO_Error_State_SetPinDirection+0x20>
 3f2:	e8 c0       	rjmp	.+464    	; 0x5c4 <MDIO_Error_State_SetPinDirection+0x1f0>
	{
		switch(Copy_u8PortNumber)
 3f4:	8b 81       	ldd	r24, Y+3	; 0x03
 3f6:	28 2f       	mov	r18, r24
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	3e 83       	std	Y+6, r19	; 0x06
 3fc:	2d 83       	std	Y+5, r18	; 0x05
 3fe:	8d 81       	ldd	r24, Y+5	; 0x05
 400:	9e 81       	ldd	r25, Y+6	; 0x06
 402:	81 30       	cpi	r24, 0x01	; 1
 404:	91 05       	cpc	r25, r1
 406:	09 f4       	brne	.+2      	; 0x40a <MDIO_Error_State_SetPinDirection+0x36>
 408:	48 c0       	rjmp	.+144    	; 0x49a <MDIO_Error_State_SetPinDirection+0xc6>
 40a:	2d 81       	ldd	r18, Y+5	; 0x05
 40c:	3e 81       	ldd	r19, Y+6	; 0x06
 40e:	22 30       	cpi	r18, 0x02	; 2
 410:	31 05       	cpc	r19, r1
 412:	2c f4       	brge	.+10     	; 0x41e <MDIO_Error_State_SetPinDirection+0x4a>
 414:	8d 81       	ldd	r24, Y+5	; 0x05
 416:	9e 81       	ldd	r25, Y+6	; 0x06
 418:	00 97       	sbiw	r24, 0x00	; 0
 41a:	71 f0       	breq	.+28     	; 0x438 <MDIO_Error_State_SetPinDirection+0x64>
 41c:	d1 c0       	rjmp	.+418    	; 0x5c0 <MDIO_Error_State_SetPinDirection+0x1ec>
 41e:	2d 81       	ldd	r18, Y+5	; 0x05
 420:	3e 81       	ldd	r19, Y+6	; 0x06
 422:	22 30       	cpi	r18, 0x02	; 2
 424:	31 05       	cpc	r19, r1
 426:	09 f4       	brne	.+2      	; 0x42a <MDIO_Error_State_SetPinDirection+0x56>
 428:	69 c0       	rjmp	.+210    	; 0x4fc <MDIO_Error_State_SetPinDirection+0x128>
 42a:	8d 81       	ldd	r24, Y+5	; 0x05
 42c:	9e 81       	ldd	r25, Y+6	; 0x06
 42e:	83 30       	cpi	r24, 0x03	; 3
 430:	91 05       	cpc	r25, r1
 432:	09 f4       	brne	.+2      	; 0x436 <MDIO_Error_State_SetPinDirection+0x62>
 434:	94 c0       	rjmp	.+296    	; 0x55e <MDIO_Error_State_SetPinDirection+0x18a>
 436:	c4 c0       	rjmp	.+392    	; 0x5c0 <MDIO_Error_State_SetPinDirection+0x1ec>
		{
		case MDIO_PORTA:
			if(Copy_u8PinDirection==PIN_OUTPUT)
 438:	8c 81       	ldd	r24, Y+4	; 0x04
 43a:	81 30       	cpi	r24, 0x01	; 1
 43c:	a1 f4       	brne	.+40     	; 0x466 <MDIO_Error_State_SetPinDirection+0x92>
			{
				SET_BIT(DDRA,Copy_u8PinNumber);
 43e:	aa e3       	ldi	r26, 0x3A	; 58
 440:	b0 e0       	ldi	r27, 0x00	; 0
 442:	ea e3       	ldi	r30, 0x3A	; 58
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	80 81       	ld	r24, Z
 448:	48 2f       	mov	r20, r24
 44a:	8a 81       	ldd	r24, Y+2	; 0x02
 44c:	28 2f       	mov	r18, r24
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	02 2e       	mov	r0, r18
 456:	02 c0       	rjmp	.+4      	; 0x45c <MDIO_Error_State_SetPinDirection+0x88>
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	0a 94       	dec	r0
 45e:	e2 f7       	brpl	.-8      	; 0x458 <MDIO_Error_State_SetPinDirection+0x84>
 460:	84 2b       	or	r24, r20
 462:	8c 93       	st	X, r24
 464:	b0 c0       	rjmp	.+352    	; 0x5c6 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
 466:	8c 81       	ldd	r24, Y+4	; 0x04
 468:	88 23       	and	r24, r24
 46a:	a9 f4       	brne	.+42     	; 0x496 <MDIO_Error_State_SetPinDirection+0xc2>
			{
				CLR_BIT(DDRA,Copy_u8PinNumber);
 46c:	aa e3       	ldi	r26, 0x3A	; 58
 46e:	b0 e0       	ldi	r27, 0x00	; 0
 470:	ea e3       	ldi	r30, 0x3A	; 58
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	80 81       	ld	r24, Z
 476:	48 2f       	mov	r20, r24
 478:	8a 81       	ldd	r24, Y+2	; 0x02
 47a:	28 2f       	mov	r18, r24
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	02 2e       	mov	r0, r18
 484:	02 c0       	rjmp	.+4      	; 0x48a <MDIO_Error_State_SetPinDirection+0xb6>
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	0a 94       	dec	r0
 48c:	e2 f7       	brpl	.-8      	; 0x486 <MDIO_Error_State_SetPinDirection+0xb2>
 48e:	80 95       	com	r24
 490:	84 23       	and	r24, r20
 492:	8c 93       	st	X, r24
 494:	98 c0       	rjmp	.+304    	; 0x5c6 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
 496:	19 82       	std	Y+1, r1	; 0x01
 498:	96 c0       	rjmp	.+300    	; 0x5c6 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		case MDIO_PORTB:
			if(Copy_u8PinDirection==PIN_OUTPUT)
 49a:	8c 81       	ldd	r24, Y+4	; 0x04
 49c:	81 30       	cpi	r24, 0x01	; 1
 49e:	a1 f4       	brne	.+40     	; 0x4c8 <MDIO_Error_State_SetPinDirection+0xf4>
			{
				SET_BIT(DDRB,Copy_u8PinNumber);
 4a0:	a7 e3       	ldi	r26, 0x37	; 55
 4a2:	b0 e0       	ldi	r27, 0x00	; 0
 4a4:	e7 e3       	ldi	r30, 0x37	; 55
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	80 81       	ld	r24, Z
 4aa:	48 2f       	mov	r20, r24
 4ac:	8a 81       	ldd	r24, Y+2	; 0x02
 4ae:	28 2f       	mov	r18, r24
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	02 2e       	mov	r0, r18
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <MDIO_Error_State_SetPinDirection+0xea>
 4ba:	88 0f       	add	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	0a 94       	dec	r0
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <MDIO_Error_State_SetPinDirection+0xe6>
 4c2:	84 2b       	or	r24, r20
 4c4:	8c 93       	st	X, r24
 4c6:	7f c0       	rjmp	.+254    	; 0x5c6 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
 4c8:	8c 81       	ldd	r24, Y+4	; 0x04
 4ca:	88 23       	and	r24, r24
 4cc:	a9 f4       	brne	.+42     	; 0x4f8 <MDIO_Error_State_SetPinDirection+0x124>
			{
				CLR_BIT(DDRB,Copy_u8PinNumber);
 4ce:	a7 e3       	ldi	r26, 0x37	; 55
 4d0:	b0 e0       	ldi	r27, 0x00	; 0
 4d2:	e7 e3       	ldi	r30, 0x37	; 55
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	80 81       	ld	r24, Z
 4d8:	48 2f       	mov	r20, r24
 4da:	8a 81       	ldd	r24, Y+2	; 0x02
 4dc:	28 2f       	mov	r18, r24
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	02 2e       	mov	r0, r18
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <MDIO_Error_State_SetPinDirection+0x118>
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	0a 94       	dec	r0
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <MDIO_Error_State_SetPinDirection+0x114>
 4f0:	80 95       	com	r24
 4f2:	84 23       	and	r24, r20
 4f4:	8c 93       	st	X, r24
 4f6:	67 c0       	rjmp	.+206    	; 0x5c6 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
 4f8:	19 82       	std	Y+1, r1	; 0x01
 4fa:	65 c0       	rjmp	.+202    	; 0x5c6 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		case MDIO_PORTC:
			if(Copy_u8PinDirection==PIN_OUTPUT)
 4fc:	8c 81       	ldd	r24, Y+4	; 0x04
 4fe:	81 30       	cpi	r24, 0x01	; 1
 500:	a1 f4       	brne	.+40     	; 0x52a <MDIO_Error_State_SetPinDirection+0x156>
			{
				SET_BIT(DDRC,Copy_u8PinNumber);
 502:	a4 e3       	ldi	r26, 0x34	; 52
 504:	b0 e0       	ldi	r27, 0x00	; 0
 506:	e4 e3       	ldi	r30, 0x34	; 52
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	80 81       	ld	r24, Z
 50c:	48 2f       	mov	r20, r24
 50e:	8a 81       	ldd	r24, Y+2	; 0x02
 510:	28 2f       	mov	r18, r24
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	02 2e       	mov	r0, r18
 51a:	02 c0       	rjmp	.+4      	; 0x520 <MDIO_Error_State_SetPinDirection+0x14c>
 51c:	88 0f       	add	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	0a 94       	dec	r0
 522:	e2 f7       	brpl	.-8      	; 0x51c <MDIO_Error_State_SetPinDirection+0x148>
 524:	84 2b       	or	r24, r20
 526:	8c 93       	st	X, r24
 528:	4e c0       	rjmp	.+156    	; 0x5c6 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
 52a:	8c 81       	ldd	r24, Y+4	; 0x04
 52c:	88 23       	and	r24, r24
 52e:	a9 f4       	brne	.+42     	; 0x55a <MDIO_Error_State_SetPinDirection+0x186>
			{
				CLR_BIT(DDRC,Copy_u8PinNumber);
 530:	a4 e3       	ldi	r26, 0x34	; 52
 532:	b0 e0       	ldi	r27, 0x00	; 0
 534:	e4 e3       	ldi	r30, 0x34	; 52
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	80 81       	ld	r24, Z
 53a:	48 2f       	mov	r20, r24
 53c:	8a 81       	ldd	r24, Y+2	; 0x02
 53e:	28 2f       	mov	r18, r24
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	02 2e       	mov	r0, r18
 548:	02 c0       	rjmp	.+4      	; 0x54e <MDIO_Error_State_SetPinDirection+0x17a>
 54a:	88 0f       	add	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	0a 94       	dec	r0
 550:	e2 f7       	brpl	.-8      	; 0x54a <MDIO_Error_State_SetPinDirection+0x176>
 552:	80 95       	com	r24
 554:	84 23       	and	r24, r20
 556:	8c 93       	st	X, r24
 558:	36 c0       	rjmp	.+108    	; 0x5c6 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
 55a:	19 82       	std	Y+1, r1	; 0x01
 55c:	34 c0       	rjmp	.+104    	; 0x5c6 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;	
		case MDIO_PORTD:
			if(Copy_u8PinDirection==PIN_OUTPUT)
 55e:	8c 81       	ldd	r24, Y+4	; 0x04
 560:	81 30       	cpi	r24, 0x01	; 1
 562:	a1 f4       	brne	.+40     	; 0x58c <MDIO_Error_State_SetPinDirection+0x1b8>
			{
				SET_BIT(DDRD,Copy_u8PinNumber);
 564:	a1 e3       	ldi	r26, 0x31	; 49
 566:	b0 e0       	ldi	r27, 0x00	; 0
 568:	e1 e3       	ldi	r30, 0x31	; 49
 56a:	f0 e0       	ldi	r31, 0x00	; 0
 56c:	80 81       	ld	r24, Z
 56e:	48 2f       	mov	r20, r24
 570:	8a 81       	ldd	r24, Y+2	; 0x02
 572:	28 2f       	mov	r18, r24
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	02 2e       	mov	r0, r18
 57c:	02 c0       	rjmp	.+4      	; 0x582 <MDIO_Error_State_SetPinDirection+0x1ae>
 57e:	88 0f       	add	r24, r24
 580:	99 1f       	adc	r25, r25
 582:	0a 94       	dec	r0
 584:	e2 f7       	brpl	.-8      	; 0x57e <MDIO_Error_State_SetPinDirection+0x1aa>
 586:	84 2b       	or	r24, r20
 588:	8c 93       	st	X, r24
 58a:	1d c0       	rjmp	.+58     	; 0x5c6 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
 58c:	8c 81       	ldd	r24, Y+4	; 0x04
 58e:	88 23       	and	r24, r24
 590:	a9 f4       	brne	.+42     	; 0x5bc <MDIO_Error_State_SetPinDirection+0x1e8>
			{
				CLR_BIT(DDRD,Copy_u8PinNumber);
 592:	a1 e3       	ldi	r26, 0x31	; 49
 594:	b0 e0       	ldi	r27, 0x00	; 0
 596:	e1 e3       	ldi	r30, 0x31	; 49
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	80 81       	ld	r24, Z
 59c:	48 2f       	mov	r20, r24
 59e:	8a 81       	ldd	r24, Y+2	; 0x02
 5a0:	28 2f       	mov	r18, r24
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	02 2e       	mov	r0, r18
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <MDIO_Error_State_SetPinDirection+0x1dc>
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	0a 94       	dec	r0
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <MDIO_Error_State_SetPinDirection+0x1d8>
 5b4:	80 95       	com	r24
 5b6:	84 23       	and	r24, r20
 5b8:	8c 93       	st	X, r24
 5ba:	05 c0       	rjmp	.+10     	; 0x5c6 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
 5bc:	19 82       	std	Y+1, r1	; 0x01
 5be:	03 c0       	rjmp	.+6      	; 0x5c6 <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
 5c0:	19 82       	std	Y+1, r1	; 0x01
 5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <MDIO_Error_State_SetPinDirection+0x1f2>
			break;
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
 5c4:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState;
 5c6:	89 81       	ldd	r24, Y+1	; 0x01
}
 5c8:	26 96       	adiw	r28, 0x06	; 6
 5ca:	0f b6       	in	r0, 0x3f	; 63
 5cc:	f8 94       	cli
 5ce:	de bf       	out	0x3e, r29	; 62
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	cd bf       	out	0x3d, r28	; 61
 5d4:	cf 91       	pop	r28
 5d6:	df 91       	pop	r29
 5d8:	08 95       	ret

000005da <MDIO_Error_State_SetPortDirection>:
/*Set Port Direction Function */
Error_State MDIO_Error_State_SetPortDirection(u8 Copy_u8PortNumber,u8 Copy_u8PortDirection)
{
 5da:	df 93       	push	r29
 5dc:	cf 93       	push	r28
 5de:	00 d0       	rcall	.+0      	; 0x5e0 <MDIO_Error_State_SetPortDirection+0x6>
 5e0:	00 d0       	rcall	.+0      	; 0x5e2 <MDIO_Error_State_SetPortDirection+0x8>
 5e2:	0f 92       	push	r0
 5e4:	cd b7       	in	r28, 0x3d	; 61
 5e6:	de b7       	in	r29, 0x3e	; 62
 5e8:	8a 83       	std	Y+2, r24	; 0x02
 5ea:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState=OK;
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection==PORT_OUTPUT)||(Copy_u8PortDirection==PORT_INPUT))
 5f0:	8b 81       	ldd	r24, Y+3	; 0x03
 5f2:	8f 3f       	cpi	r24, 0xFF	; 255
 5f4:	19 f0       	breq	.+6      	; 0x5fc <MDIO_Error_State_SetPortDirection+0x22>
 5f6:	8b 81       	ldd	r24, Y+3	; 0x03
 5f8:	88 23       	and	r24, r24
 5fa:	a9 f5       	brne	.+106    	; 0x666 <MDIO_Error_State_SetPortDirection+0x8c>
	{
		switch(Copy_u8PortNumber)
 5fc:	8a 81       	ldd	r24, Y+2	; 0x02
 5fe:	28 2f       	mov	r18, r24
 600:	30 e0       	ldi	r19, 0x00	; 0
 602:	3d 83       	std	Y+5, r19	; 0x05
 604:	2c 83       	std	Y+4, r18	; 0x04
 606:	8c 81       	ldd	r24, Y+4	; 0x04
 608:	9d 81       	ldd	r25, Y+5	; 0x05
 60a:	81 30       	cpi	r24, 0x01	; 1
 60c:	91 05       	cpc	r25, r1
 60e:	d1 f0       	breq	.+52     	; 0x644 <MDIO_Error_State_SetPortDirection+0x6a>
 610:	2c 81       	ldd	r18, Y+4	; 0x04
 612:	3d 81       	ldd	r19, Y+5	; 0x05
 614:	22 30       	cpi	r18, 0x02	; 2
 616:	31 05       	cpc	r19, r1
 618:	2c f4       	brge	.+10     	; 0x624 <MDIO_Error_State_SetPortDirection+0x4a>
 61a:	8c 81       	ldd	r24, Y+4	; 0x04
 61c:	9d 81       	ldd	r25, Y+5	; 0x05
 61e:	00 97       	sbiw	r24, 0x00	; 0
 620:	61 f0       	breq	.+24     	; 0x63a <MDIO_Error_State_SetPortDirection+0x60>
 622:	1f c0       	rjmp	.+62     	; 0x662 <MDIO_Error_State_SetPortDirection+0x88>
 624:	2c 81       	ldd	r18, Y+4	; 0x04
 626:	3d 81       	ldd	r19, Y+5	; 0x05
 628:	22 30       	cpi	r18, 0x02	; 2
 62a:	31 05       	cpc	r19, r1
 62c:	81 f0       	breq	.+32     	; 0x64e <MDIO_Error_State_SetPortDirection+0x74>
 62e:	8c 81       	ldd	r24, Y+4	; 0x04
 630:	9d 81       	ldd	r25, Y+5	; 0x05
 632:	83 30       	cpi	r24, 0x03	; 3
 634:	91 05       	cpc	r25, r1
 636:	81 f0       	breq	.+32     	; 0x658 <MDIO_Error_State_SetPortDirection+0x7e>
 638:	14 c0       	rjmp	.+40     	; 0x662 <MDIO_Error_State_SetPortDirection+0x88>
		{
		case MDIO_PORTA:
			DDRA=Copy_u8PortDirection;
 63a:	ea e3       	ldi	r30, 0x3A	; 58
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	8b 81       	ldd	r24, Y+3	; 0x03
 640:	80 83       	st	Z, r24
 642:	12 c0       	rjmp	.+36     	; 0x668 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTB:
			DDRB=Copy_u8PortDirection;
 644:	e7 e3       	ldi	r30, 0x37	; 55
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	8b 81       	ldd	r24, Y+3	; 0x03
 64a:	80 83       	st	Z, r24
 64c:	0d c0       	rjmp	.+26     	; 0x668 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTC:
			DDRC=Copy_u8PortDirection;
 64e:	e4 e3       	ldi	r30, 0x34	; 52
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	8b 81       	ldd	r24, Y+3	; 0x03
 654:	80 83       	st	Z, r24
 656:	08 c0       	rjmp	.+16     	; 0x668 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTD:
			DDRD=Copy_u8PortDirection;
 658:	e1 e3       	ldi	r30, 0x31	; 49
 65a:	f0 e0       	ldi	r31, 0x00	; 0
 65c:	8b 81       	ldd	r24, Y+3	; 0x03
 65e:	80 83       	st	Z, r24
 660:	03 c0       	rjmp	.+6      	; 0x668 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
 662:	19 82       	std	Y+1, r1	; 0x01
 664:	01 c0       	rjmp	.+2      	; 0x668 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
 666:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState;
 668:	89 81       	ldd	r24, Y+1	; 0x01
}
 66a:	0f 90       	pop	r0
 66c:	0f 90       	pop	r0
 66e:	0f 90       	pop	r0
 670:	0f 90       	pop	r0
 672:	0f 90       	pop	r0
 674:	cf 91       	pop	r28
 676:	df 91       	pop	r29
 678:	08 95       	ret

0000067a <MDIO_Error_State_SetPinValue>:

/*Set Pin Value Function */
Error_State MDIO_Error_State_SetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinValue)
{
 67a:	df 93       	push	r29
 67c:	cf 93       	push	r28
 67e:	00 d0       	rcall	.+0      	; 0x680 <MDIO_Error_State_SetPinValue+0x6>
 680:	00 d0       	rcall	.+0      	; 0x682 <MDIO_Error_State_SetPinValue+0x8>
 682:	00 d0       	rcall	.+0      	; 0x684 <MDIO_Error_State_SetPinValue+0xa>
 684:	cd b7       	in	r28, 0x3d	; 61
 686:	de b7       	in	r29, 0x3e	; 62
 688:	8a 83       	std	Y+2, r24	; 0x02
 68a:	6b 83       	std	Y+3, r22	; 0x03
 68c:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
 692:	8a 81       	ldd	r24, Y+2	; 0x02
 694:	88 30       	cpi	r24, 0x08	; 8
 696:	08 f0       	brcs	.+2      	; 0x69a <MDIO_Error_State_SetPinValue+0x20>
 698:	e8 c0       	rjmp	.+464    	; 0x86a <__stack+0xb>
	{
		switch(Copy_u8PortNumber)
 69a:	8b 81       	ldd	r24, Y+3	; 0x03
 69c:	28 2f       	mov	r18, r24
 69e:	30 e0       	ldi	r19, 0x00	; 0
 6a0:	3e 83       	std	Y+6, r19	; 0x06
 6a2:	2d 83       	std	Y+5, r18	; 0x05
 6a4:	8d 81       	ldd	r24, Y+5	; 0x05
 6a6:	9e 81       	ldd	r25, Y+6	; 0x06
 6a8:	81 30       	cpi	r24, 0x01	; 1
 6aa:	91 05       	cpc	r25, r1
 6ac:	09 f4       	brne	.+2      	; 0x6b0 <MDIO_Error_State_SetPinValue+0x36>
 6ae:	48 c0       	rjmp	.+144    	; 0x740 <MDIO_Error_State_SetPinValue+0xc6>
 6b0:	2d 81       	ldd	r18, Y+5	; 0x05
 6b2:	3e 81       	ldd	r19, Y+6	; 0x06
 6b4:	22 30       	cpi	r18, 0x02	; 2
 6b6:	31 05       	cpc	r19, r1
 6b8:	2c f4       	brge	.+10     	; 0x6c4 <MDIO_Error_State_SetPinValue+0x4a>
 6ba:	8d 81       	ldd	r24, Y+5	; 0x05
 6bc:	9e 81       	ldd	r25, Y+6	; 0x06
 6be:	00 97       	sbiw	r24, 0x00	; 0
 6c0:	71 f0       	breq	.+28     	; 0x6de <MDIO_Error_State_SetPinValue+0x64>
 6c2:	d1 c0       	rjmp	.+418    	; 0x866 <__stack+0x7>
 6c4:	2d 81       	ldd	r18, Y+5	; 0x05
 6c6:	3e 81       	ldd	r19, Y+6	; 0x06
 6c8:	22 30       	cpi	r18, 0x02	; 2
 6ca:	31 05       	cpc	r19, r1
 6cc:	09 f4       	brne	.+2      	; 0x6d0 <MDIO_Error_State_SetPinValue+0x56>
 6ce:	69 c0       	rjmp	.+210    	; 0x7a2 <MDIO_Error_State_SetPinValue+0x128>
 6d0:	8d 81       	ldd	r24, Y+5	; 0x05
 6d2:	9e 81       	ldd	r25, Y+6	; 0x06
 6d4:	83 30       	cpi	r24, 0x03	; 3
 6d6:	91 05       	cpc	r25, r1
 6d8:	09 f4       	brne	.+2      	; 0x6dc <MDIO_Error_State_SetPinValue+0x62>
 6da:	94 c0       	rjmp	.+296    	; 0x804 <MDIO_Error_State_SetPinValue+0x18a>
 6dc:	c4 c0       	rjmp	.+392    	; 0x866 <__stack+0x7>
		{
		case MDIO_PORTA:
			if(Copy_u8PinValue==PIN_HIGH)
 6de:	8c 81       	ldd	r24, Y+4	; 0x04
 6e0:	81 30       	cpi	r24, 0x01	; 1
 6e2:	a1 f4       	brne	.+40     	; 0x70c <MDIO_Error_State_SetPinValue+0x92>
			{
				SET_BIT(PORTA,Copy_u8PinNumber);
 6e4:	ab e3       	ldi	r26, 0x3B	; 59
 6e6:	b0 e0       	ldi	r27, 0x00	; 0
 6e8:	eb e3       	ldi	r30, 0x3B	; 59
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	80 81       	ld	r24, Z
 6ee:	48 2f       	mov	r20, r24
 6f0:	8a 81       	ldd	r24, Y+2	; 0x02
 6f2:	28 2f       	mov	r18, r24
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	02 2e       	mov	r0, r18
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <MDIO_Error_State_SetPinValue+0x88>
 6fe:	88 0f       	add	r24, r24
 700:	99 1f       	adc	r25, r25
 702:	0a 94       	dec	r0
 704:	e2 f7       	brpl	.-8      	; 0x6fe <MDIO_Error_State_SetPinValue+0x84>
 706:	84 2b       	or	r24, r20
 708:	8c 93       	st	X, r24
 70a:	b0 c0       	rjmp	.+352    	; 0x86c <__stack+0xd>
			}
			else if(Copy_u8PinValue==PIN_LOW)
 70c:	8c 81       	ldd	r24, Y+4	; 0x04
 70e:	88 23       	and	r24, r24
 710:	a9 f4       	brne	.+42     	; 0x73c <MDIO_Error_State_SetPinValue+0xc2>
			{
				CLR_BIT(PORTA,Copy_u8PinNumber);
 712:	ab e3       	ldi	r26, 0x3B	; 59
 714:	b0 e0       	ldi	r27, 0x00	; 0
 716:	eb e3       	ldi	r30, 0x3B	; 59
 718:	f0 e0       	ldi	r31, 0x00	; 0
 71a:	80 81       	ld	r24, Z
 71c:	48 2f       	mov	r20, r24
 71e:	8a 81       	ldd	r24, Y+2	; 0x02
 720:	28 2f       	mov	r18, r24
 722:	30 e0       	ldi	r19, 0x00	; 0
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	02 2e       	mov	r0, r18
 72a:	02 c0       	rjmp	.+4      	; 0x730 <MDIO_Error_State_SetPinValue+0xb6>
 72c:	88 0f       	add	r24, r24
 72e:	99 1f       	adc	r25, r25
 730:	0a 94       	dec	r0
 732:	e2 f7       	brpl	.-8      	; 0x72c <MDIO_Error_State_SetPinValue+0xb2>
 734:	80 95       	com	r24
 736:	84 23       	and	r24, r20
 738:	8c 93       	st	X, r24
 73a:	98 c0       	rjmp	.+304    	; 0x86c <__stack+0xd>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
 73c:	19 82       	std	Y+1, r1	; 0x01
 73e:	96 c0       	rjmp	.+300    	; 0x86c <__stack+0xd>
			}
			break;
		case MDIO_PORTB:
			if(Copy_u8PinValue==PIN_HIGH)
 740:	8c 81       	ldd	r24, Y+4	; 0x04
 742:	81 30       	cpi	r24, 0x01	; 1
 744:	a1 f4       	brne	.+40     	; 0x76e <MDIO_Error_State_SetPinValue+0xf4>
			{
				SET_BIT(PORTB,Copy_u8PinNumber);
 746:	a8 e3       	ldi	r26, 0x38	; 56
 748:	b0 e0       	ldi	r27, 0x00	; 0
 74a:	e8 e3       	ldi	r30, 0x38	; 56
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	80 81       	ld	r24, Z
 750:	48 2f       	mov	r20, r24
 752:	8a 81       	ldd	r24, Y+2	; 0x02
 754:	28 2f       	mov	r18, r24
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	02 2e       	mov	r0, r18
 75e:	02 c0       	rjmp	.+4      	; 0x764 <MDIO_Error_State_SetPinValue+0xea>
 760:	88 0f       	add	r24, r24
 762:	99 1f       	adc	r25, r25
 764:	0a 94       	dec	r0
 766:	e2 f7       	brpl	.-8      	; 0x760 <MDIO_Error_State_SetPinValue+0xe6>
 768:	84 2b       	or	r24, r20
 76a:	8c 93       	st	X, r24
 76c:	7f c0       	rjmp	.+254    	; 0x86c <__stack+0xd>
			}
			else if(Copy_u8PinValue==PIN_LOW)
 76e:	8c 81       	ldd	r24, Y+4	; 0x04
 770:	88 23       	and	r24, r24
 772:	a9 f4       	brne	.+42     	; 0x79e <MDIO_Error_State_SetPinValue+0x124>
			{
				CLR_BIT(PORTB,Copy_u8PinNumber);
 774:	a8 e3       	ldi	r26, 0x38	; 56
 776:	b0 e0       	ldi	r27, 0x00	; 0
 778:	e8 e3       	ldi	r30, 0x38	; 56
 77a:	f0 e0       	ldi	r31, 0x00	; 0
 77c:	80 81       	ld	r24, Z
 77e:	48 2f       	mov	r20, r24
 780:	8a 81       	ldd	r24, Y+2	; 0x02
 782:	28 2f       	mov	r18, r24
 784:	30 e0       	ldi	r19, 0x00	; 0
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	02 2e       	mov	r0, r18
 78c:	02 c0       	rjmp	.+4      	; 0x792 <MDIO_Error_State_SetPinValue+0x118>
 78e:	88 0f       	add	r24, r24
 790:	99 1f       	adc	r25, r25
 792:	0a 94       	dec	r0
 794:	e2 f7       	brpl	.-8      	; 0x78e <MDIO_Error_State_SetPinValue+0x114>
 796:	80 95       	com	r24
 798:	84 23       	and	r24, r20
 79a:	8c 93       	st	X, r24
 79c:	67 c0       	rjmp	.+206    	; 0x86c <__stack+0xd>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
 79e:	19 82       	std	Y+1, r1	; 0x01
 7a0:	65 c0       	rjmp	.+202    	; 0x86c <__stack+0xd>
			}
			break;
		case MDIO_PORTC:
			if(Copy_u8PinValue==PIN_HIGH)
 7a2:	8c 81       	ldd	r24, Y+4	; 0x04
 7a4:	81 30       	cpi	r24, 0x01	; 1
 7a6:	a1 f4       	brne	.+40     	; 0x7d0 <MDIO_Error_State_SetPinValue+0x156>
			{
				SET_BIT(PORTC,Copy_u8PinNumber);
 7a8:	a5 e3       	ldi	r26, 0x35	; 53
 7aa:	b0 e0       	ldi	r27, 0x00	; 0
 7ac:	e5 e3       	ldi	r30, 0x35	; 53
 7ae:	f0 e0       	ldi	r31, 0x00	; 0
 7b0:	80 81       	ld	r24, Z
 7b2:	48 2f       	mov	r20, r24
 7b4:	8a 81       	ldd	r24, Y+2	; 0x02
 7b6:	28 2f       	mov	r18, r24
 7b8:	30 e0       	ldi	r19, 0x00	; 0
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	02 2e       	mov	r0, r18
 7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <MDIO_Error_State_SetPinValue+0x14c>
 7c2:	88 0f       	add	r24, r24
 7c4:	99 1f       	adc	r25, r25
 7c6:	0a 94       	dec	r0
 7c8:	e2 f7       	brpl	.-8      	; 0x7c2 <MDIO_Error_State_SetPinValue+0x148>
 7ca:	84 2b       	or	r24, r20
 7cc:	8c 93       	st	X, r24
 7ce:	4e c0       	rjmp	.+156    	; 0x86c <__stack+0xd>
			}
			else if(Copy_u8PinValue==PIN_LOW)
 7d0:	8c 81       	ldd	r24, Y+4	; 0x04
 7d2:	88 23       	and	r24, r24
 7d4:	a9 f4       	brne	.+42     	; 0x800 <MDIO_Error_State_SetPinValue+0x186>
			{
				CLR_BIT(PORTC,Copy_u8PinNumber);
 7d6:	a5 e3       	ldi	r26, 0x35	; 53
 7d8:	b0 e0       	ldi	r27, 0x00	; 0
 7da:	e5 e3       	ldi	r30, 0x35	; 53
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	80 81       	ld	r24, Z
 7e0:	48 2f       	mov	r20, r24
 7e2:	8a 81       	ldd	r24, Y+2	; 0x02
 7e4:	28 2f       	mov	r18, r24
 7e6:	30 e0       	ldi	r19, 0x00	; 0
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	02 2e       	mov	r0, r18
 7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <MDIO_Error_State_SetPinValue+0x17a>
 7f0:	88 0f       	add	r24, r24
 7f2:	99 1f       	adc	r25, r25
 7f4:	0a 94       	dec	r0
 7f6:	e2 f7       	brpl	.-8      	; 0x7f0 <MDIO_Error_State_SetPinValue+0x176>
 7f8:	80 95       	com	r24
 7fa:	84 23       	and	r24, r20
 7fc:	8c 93       	st	X, r24
 7fe:	36 c0       	rjmp	.+108    	; 0x86c <__stack+0xd>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
 800:	19 82       	std	Y+1, r1	; 0x01
 802:	34 c0       	rjmp	.+104    	; 0x86c <__stack+0xd>
			}
			break;	
		case MDIO_PORTD:
			if(Copy_u8PinValue==PIN_HIGH)
 804:	8c 81       	ldd	r24, Y+4	; 0x04
 806:	81 30       	cpi	r24, 0x01	; 1
 808:	a1 f4       	brne	.+40     	; 0x832 <MDIO_Error_State_SetPinValue+0x1b8>
			{
				SET_BIT(PORTD,Copy_u8PinNumber);
 80a:	a2 e3       	ldi	r26, 0x32	; 50
 80c:	b0 e0       	ldi	r27, 0x00	; 0
 80e:	e2 e3       	ldi	r30, 0x32	; 50
 810:	f0 e0       	ldi	r31, 0x00	; 0
 812:	80 81       	ld	r24, Z
 814:	48 2f       	mov	r20, r24
 816:	8a 81       	ldd	r24, Y+2	; 0x02
 818:	28 2f       	mov	r18, r24
 81a:	30 e0       	ldi	r19, 0x00	; 0
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	02 2e       	mov	r0, r18
 822:	02 c0       	rjmp	.+4      	; 0x828 <MDIO_Error_State_SetPinValue+0x1ae>
 824:	88 0f       	add	r24, r24
 826:	99 1f       	adc	r25, r25
 828:	0a 94       	dec	r0
 82a:	e2 f7       	brpl	.-8      	; 0x824 <MDIO_Error_State_SetPinValue+0x1aa>
 82c:	84 2b       	or	r24, r20
 82e:	8c 93       	st	X, r24
 830:	1d c0       	rjmp	.+58     	; 0x86c <__stack+0xd>
			}
			else if(Copy_u8PinValue==PIN_LOW)
 832:	8c 81       	ldd	r24, Y+4	; 0x04
 834:	88 23       	and	r24, r24
 836:	a9 f4       	brne	.+42     	; 0x862 <__stack+0x3>
			{
				CLR_BIT(PORTD,Copy_u8PinNumber);
 838:	a2 e3       	ldi	r26, 0x32	; 50
 83a:	b0 e0       	ldi	r27, 0x00	; 0
 83c:	e2 e3       	ldi	r30, 0x32	; 50
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	80 81       	ld	r24, Z
 842:	48 2f       	mov	r20, r24
 844:	8a 81       	ldd	r24, Y+2	; 0x02
 846:	28 2f       	mov	r18, r24
 848:	30 e0       	ldi	r19, 0x00	; 0
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	02 2e       	mov	r0, r18
 850:	02 c0       	rjmp	.+4      	; 0x856 <MDIO_Error_State_SetPinValue+0x1dc>
 852:	88 0f       	add	r24, r24
 854:	99 1f       	adc	r25, r25
 856:	0a 94       	dec	r0
 858:	e2 f7       	brpl	.-8      	; 0x852 <MDIO_Error_State_SetPinValue+0x1d8>
 85a:	80 95       	com	r24
 85c:	84 23       	and	r24, r20
 85e:	8c 93       	st	X, r24
 860:	05 c0       	rjmp	.+10     	; 0x86c <__stack+0xd>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
 862:	19 82       	std	Y+1, r1	; 0x01
 864:	03 c0       	rjmp	.+6      	; 0x86c <__stack+0xd>
			}
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
 866:	19 82       	std	Y+1, r1	; 0x01
 868:	01 c0       	rjmp	.+2      	; 0x86c <__stack+0xd>
			break;
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
 86a:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState;
 86c:	89 81       	ldd	r24, Y+1	; 0x01
}
 86e:	26 96       	adiw	r28, 0x06	; 6
 870:	0f b6       	in	r0, 0x3f	; 63
 872:	f8 94       	cli
 874:	de bf       	out	0x3e, r29	; 62
 876:	0f be       	out	0x3f, r0	; 63
 878:	cd bf       	out	0x3d, r28	; 61
 87a:	cf 91       	pop	r28
 87c:	df 91       	pop	r29
 87e:	08 95       	ret

00000880 <MDIO_Error_State_SetPortValue>:

/*Set Port Value Function */
Error_State MDIO_Error_State_SetPortValue(u8 Copy_u8PortNumber,u8 Copy_u8PortValue)
{
 880:	df 93       	push	r29
 882:	cf 93       	push	r28
 884:	00 d0       	rcall	.+0      	; 0x886 <MDIO_Error_State_SetPortValue+0x6>
 886:	00 d0       	rcall	.+0      	; 0x888 <MDIO_Error_State_SetPortValue+0x8>
 888:	0f 92       	push	r0
 88a:	cd b7       	in	r28, 0x3d	; 61
 88c:	de b7       	in	r29, 0x3e	; 62
 88e:	8a 83       	std	Y+2, r24	; 0x02
 890:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState=OK;
 892:	81 e0       	ldi	r24, 0x01	; 1
 894:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortNumber)
 896:	8a 81       	ldd	r24, Y+2	; 0x02
 898:	28 2f       	mov	r18, r24
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	3d 83       	std	Y+5, r19	; 0x05
 89e:	2c 83       	std	Y+4, r18	; 0x04
 8a0:	8c 81       	ldd	r24, Y+4	; 0x04
 8a2:	9d 81       	ldd	r25, Y+5	; 0x05
 8a4:	81 30       	cpi	r24, 0x01	; 1
 8a6:	91 05       	cpc	r25, r1
 8a8:	d1 f0       	breq	.+52     	; 0x8de <MDIO_Error_State_SetPortValue+0x5e>
 8aa:	2c 81       	ldd	r18, Y+4	; 0x04
 8ac:	3d 81       	ldd	r19, Y+5	; 0x05
 8ae:	22 30       	cpi	r18, 0x02	; 2
 8b0:	31 05       	cpc	r19, r1
 8b2:	2c f4       	brge	.+10     	; 0x8be <MDIO_Error_State_SetPortValue+0x3e>
 8b4:	8c 81       	ldd	r24, Y+4	; 0x04
 8b6:	9d 81       	ldd	r25, Y+5	; 0x05
 8b8:	00 97       	sbiw	r24, 0x00	; 0
 8ba:	61 f0       	breq	.+24     	; 0x8d4 <MDIO_Error_State_SetPortValue+0x54>
 8bc:	1f c0       	rjmp	.+62     	; 0x8fc <MDIO_Error_State_SetPortValue+0x7c>
 8be:	2c 81       	ldd	r18, Y+4	; 0x04
 8c0:	3d 81       	ldd	r19, Y+5	; 0x05
 8c2:	22 30       	cpi	r18, 0x02	; 2
 8c4:	31 05       	cpc	r19, r1
 8c6:	81 f0       	breq	.+32     	; 0x8e8 <MDIO_Error_State_SetPortValue+0x68>
 8c8:	8c 81       	ldd	r24, Y+4	; 0x04
 8ca:	9d 81       	ldd	r25, Y+5	; 0x05
 8cc:	83 30       	cpi	r24, 0x03	; 3
 8ce:	91 05       	cpc	r25, r1
 8d0:	81 f0       	breq	.+32     	; 0x8f2 <MDIO_Error_State_SetPortValue+0x72>
 8d2:	14 c0       	rjmp	.+40     	; 0x8fc <MDIO_Error_State_SetPortValue+0x7c>
	{
	case MDIO_PORTA:
		PORTA=Copy_u8PortValue;
 8d4:	eb e3       	ldi	r30, 0x3B	; 59
 8d6:	f0 e0       	ldi	r31, 0x00	; 0
 8d8:	8b 81       	ldd	r24, Y+3	; 0x03
 8da:	80 83       	st	Z, r24
 8dc:	10 c0       	rjmp	.+32     	; 0x8fe <MDIO_Error_State_SetPortValue+0x7e>
		break;
	case MDIO_PORTB:
		PORTB=Copy_u8PortValue;
 8de:	e8 e3       	ldi	r30, 0x38	; 56
 8e0:	f0 e0       	ldi	r31, 0x00	; 0
 8e2:	8b 81       	ldd	r24, Y+3	; 0x03
 8e4:	80 83       	st	Z, r24
 8e6:	0b c0       	rjmp	.+22     	; 0x8fe <MDIO_Error_State_SetPortValue+0x7e>
		break;
	case MDIO_PORTC:
		PORTC=Copy_u8PortValue;
 8e8:	e5 e3       	ldi	r30, 0x35	; 53
 8ea:	f0 e0       	ldi	r31, 0x00	; 0
 8ec:	8b 81       	ldd	r24, Y+3	; 0x03
 8ee:	80 83       	st	Z, r24
 8f0:	06 c0       	rjmp	.+12     	; 0x8fe <MDIO_Error_State_SetPortValue+0x7e>
		break;	
	case MDIO_PORTD:
		PORTD=Copy_u8PortValue;
 8f2:	e2 e3       	ldi	r30, 0x32	; 50
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	8b 81       	ldd	r24, Y+3	; 0x03
 8f8:	80 83       	st	Z, r24
 8fa:	01 c0       	rjmp	.+2      	; 0x8fe <MDIO_Error_State_SetPortValue+0x7e>
		break;	
	default:
		LOC_Error_State_ReturnState=NOK;
 8fc:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return LOC_Error_State_ReturnState;
 8fe:	89 81       	ldd	r24, Y+1	; 0x01
}
 900:	0f 90       	pop	r0
 902:	0f 90       	pop	r0
 904:	0f 90       	pop	r0
 906:	0f 90       	pop	r0
 908:	0f 90       	pop	r0
 90a:	cf 91       	pop	r28
 90c:	df 91       	pop	r29
 90e:	08 95       	ret

00000910 <MDIO_Error_State_GetPinValue>:

/*Get Pin Value Function */
Error_State MDIO_Error_State_GetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8* P_u8PinValue)
{
 910:	df 93       	push	r29
 912:	cf 93       	push	r28
 914:	cd b7       	in	r28, 0x3d	; 61
 916:	de b7       	in	r29, 0x3e	; 62
 918:	27 97       	sbiw	r28, 0x07	; 7
 91a:	0f b6       	in	r0, 0x3f	; 63
 91c:	f8 94       	cli
 91e:	de bf       	out	0x3e, r29	; 62
 920:	0f be       	out	0x3f, r0	; 63
 922:	cd bf       	out	0x3d, r28	; 61
 924:	8a 83       	std	Y+2, r24	; 0x02
 926:	6b 83       	std	Y+3, r22	; 0x03
 928:	5d 83       	std	Y+5, r21	; 0x05
 92a:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
 92c:	81 e0       	ldi	r24, 0x01	; 1
 92e:	89 83       	std	Y+1, r24	; 0x01

	if(((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))&&(P_u8PinValue!=NULL_POINTER))
 930:	8a 81       	ldd	r24, Y+2	; 0x02
 932:	88 30       	cpi	r24, 0x08	; 8
 934:	08 f0       	brcs	.+2      	; 0x938 <MDIO_Error_State_GetPinValue+0x28>
 936:	79 c0       	rjmp	.+242    	; 0xa2a <MDIO_Error_State_GetPinValue+0x11a>
 938:	8c 81       	ldd	r24, Y+4	; 0x04
 93a:	9d 81       	ldd	r25, Y+5	; 0x05
 93c:	81 30       	cpi	r24, 0x01	; 1
 93e:	91 05       	cpc	r25, r1
 940:	09 f4       	brne	.+2      	; 0x944 <MDIO_Error_State_GetPinValue+0x34>
 942:	73 c0       	rjmp	.+230    	; 0xa2a <MDIO_Error_State_GetPinValue+0x11a>
	{
		switch(Copy_u8PortNumber)
 944:	8b 81       	ldd	r24, Y+3	; 0x03
 946:	28 2f       	mov	r18, r24
 948:	30 e0       	ldi	r19, 0x00	; 0
 94a:	3f 83       	std	Y+7, r19	; 0x07
 94c:	2e 83       	std	Y+6, r18	; 0x06
 94e:	4e 81       	ldd	r20, Y+6	; 0x06
 950:	5f 81       	ldd	r21, Y+7	; 0x07
 952:	41 30       	cpi	r20, 0x01	; 1
 954:	51 05       	cpc	r21, r1
 956:	59 f1       	breq	.+86     	; 0x9ae <MDIO_Error_State_GetPinValue+0x9e>
 958:	8e 81       	ldd	r24, Y+6	; 0x06
 95a:	9f 81       	ldd	r25, Y+7	; 0x07
 95c:	82 30       	cpi	r24, 0x02	; 2
 95e:	91 05       	cpc	r25, r1
 960:	34 f4       	brge	.+12     	; 0x96e <MDIO_Error_State_GetPinValue+0x5e>
 962:	2e 81       	ldd	r18, Y+6	; 0x06
 964:	3f 81       	ldd	r19, Y+7	; 0x07
 966:	21 15       	cp	r18, r1
 968:	31 05       	cpc	r19, r1
 96a:	69 f0       	breq	.+26     	; 0x986 <MDIO_Error_State_GetPinValue+0x76>
 96c:	5c c0       	rjmp	.+184    	; 0xa26 <MDIO_Error_State_GetPinValue+0x116>
 96e:	4e 81       	ldd	r20, Y+6	; 0x06
 970:	5f 81       	ldd	r21, Y+7	; 0x07
 972:	42 30       	cpi	r20, 0x02	; 2
 974:	51 05       	cpc	r21, r1
 976:	79 f1       	breq	.+94     	; 0x9d6 <MDIO_Error_State_GetPinValue+0xc6>
 978:	8e 81       	ldd	r24, Y+6	; 0x06
 97a:	9f 81       	ldd	r25, Y+7	; 0x07
 97c:	83 30       	cpi	r24, 0x03	; 3
 97e:	91 05       	cpc	r25, r1
 980:	09 f4       	brne	.+2      	; 0x984 <MDIO_Error_State_GetPinValue+0x74>
 982:	3d c0       	rjmp	.+122    	; 0x9fe <MDIO_Error_State_GetPinValue+0xee>
 984:	50 c0       	rjmp	.+160    	; 0xa26 <MDIO_Error_State_GetPinValue+0x116>
		{
		case MDIO_PORTA:
			*P_u8PinValue=GET_BIT(PINA,Copy_u8PinNumber);
 986:	e9 e3       	ldi	r30, 0x39	; 57
 988:	f0 e0       	ldi	r31, 0x00	; 0
 98a:	80 81       	ld	r24, Z
 98c:	28 2f       	mov	r18, r24
 98e:	30 e0       	ldi	r19, 0x00	; 0
 990:	8a 81       	ldd	r24, Y+2	; 0x02
 992:	88 2f       	mov	r24, r24
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	a9 01       	movw	r20, r18
 998:	02 c0       	rjmp	.+4      	; 0x99e <MDIO_Error_State_GetPinValue+0x8e>
 99a:	55 95       	asr	r21
 99c:	47 95       	ror	r20
 99e:	8a 95       	dec	r24
 9a0:	e2 f7       	brpl	.-8      	; 0x99a <MDIO_Error_State_GetPinValue+0x8a>
 9a2:	ca 01       	movw	r24, r20
 9a4:	81 70       	andi	r24, 0x01	; 1
 9a6:	ec 81       	ldd	r30, Y+4	; 0x04
 9a8:	fd 81       	ldd	r31, Y+5	; 0x05
 9aa:	80 83       	st	Z, r24
 9ac:	3f c0       	rjmp	.+126    	; 0xa2c <MDIO_Error_State_GetPinValue+0x11c>
			break;
		case MDIO_PORTB:
			*P_u8PinValue=GET_BIT(PINB,Copy_u8PinNumber);
 9ae:	e6 e3       	ldi	r30, 0x36	; 54
 9b0:	f0 e0       	ldi	r31, 0x00	; 0
 9b2:	80 81       	ld	r24, Z
 9b4:	28 2f       	mov	r18, r24
 9b6:	30 e0       	ldi	r19, 0x00	; 0
 9b8:	8a 81       	ldd	r24, Y+2	; 0x02
 9ba:	88 2f       	mov	r24, r24
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	a9 01       	movw	r20, r18
 9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <MDIO_Error_State_GetPinValue+0xb6>
 9c2:	55 95       	asr	r21
 9c4:	47 95       	ror	r20
 9c6:	8a 95       	dec	r24
 9c8:	e2 f7       	brpl	.-8      	; 0x9c2 <MDIO_Error_State_GetPinValue+0xb2>
 9ca:	ca 01       	movw	r24, r20
 9cc:	81 70       	andi	r24, 0x01	; 1
 9ce:	ec 81       	ldd	r30, Y+4	; 0x04
 9d0:	fd 81       	ldd	r31, Y+5	; 0x05
 9d2:	80 83       	st	Z, r24
 9d4:	2b c0       	rjmp	.+86     	; 0xa2c <MDIO_Error_State_GetPinValue+0x11c>
			break;
		case MDIO_PORTC:
			*P_u8PinValue=GET_BIT(PINC,Copy_u8PinNumber);
 9d6:	e3 e3       	ldi	r30, 0x33	; 51
 9d8:	f0 e0       	ldi	r31, 0x00	; 0
 9da:	80 81       	ld	r24, Z
 9dc:	28 2f       	mov	r18, r24
 9de:	30 e0       	ldi	r19, 0x00	; 0
 9e0:	8a 81       	ldd	r24, Y+2	; 0x02
 9e2:	88 2f       	mov	r24, r24
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	a9 01       	movw	r20, r18
 9e8:	02 c0       	rjmp	.+4      	; 0x9ee <MDIO_Error_State_GetPinValue+0xde>
 9ea:	55 95       	asr	r21
 9ec:	47 95       	ror	r20
 9ee:	8a 95       	dec	r24
 9f0:	e2 f7       	brpl	.-8      	; 0x9ea <MDIO_Error_State_GetPinValue+0xda>
 9f2:	ca 01       	movw	r24, r20
 9f4:	81 70       	andi	r24, 0x01	; 1
 9f6:	ec 81       	ldd	r30, Y+4	; 0x04
 9f8:	fd 81       	ldd	r31, Y+5	; 0x05
 9fa:	80 83       	st	Z, r24
 9fc:	17 c0       	rjmp	.+46     	; 0xa2c <MDIO_Error_State_GetPinValue+0x11c>
			break;
		case MDIO_PORTD:
			*P_u8PinValue=GET_BIT(PIND,Copy_u8PinNumber);
 9fe:	e0 e3       	ldi	r30, 0x30	; 48
 a00:	f0 e0       	ldi	r31, 0x00	; 0
 a02:	80 81       	ld	r24, Z
 a04:	28 2f       	mov	r18, r24
 a06:	30 e0       	ldi	r19, 0x00	; 0
 a08:	8a 81       	ldd	r24, Y+2	; 0x02
 a0a:	88 2f       	mov	r24, r24
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	a9 01       	movw	r20, r18
 a10:	02 c0       	rjmp	.+4      	; 0xa16 <MDIO_Error_State_GetPinValue+0x106>
 a12:	55 95       	asr	r21
 a14:	47 95       	ror	r20
 a16:	8a 95       	dec	r24
 a18:	e2 f7       	brpl	.-8      	; 0xa12 <MDIO_Error_State_GetPinValue+0x102>
 a1a:	ca 01       	movw	r24, r20
 a1c:	81 70       	andi	r24, 0x01	; 1
 a1e:	ec 81       	ldd	r30, Y+4	; 0x04
 a20:	fd 81       	ldd	r31, Y+5	; 0x05
 a22:	80 83       	st	Z, r24
 a24:	03 c0       	rjmp	.+6      	; 0xa2c <MDIO_Error_State_GetPinValue+0x11c>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
 a26:	19 82       	std	Y+1, r1	; 0x01
 a28:	01 c0       	rjmp	.+2      	; 0xa2c <MDIO_Error_State_GetPinValue+0x11c>
			break;		
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
 a2a:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState;
 a2c:	89 81       	ldd	r24, Y+1	; 0x01
}
 a2e:	27 96       	adiw	r28, 0x07	; 7
 a30:	0f b6       	in	r0, 0x3f	; 63
 a32:	f8 94       	cli
 a34:	de bf       	out	0x3e, r29	; 62
 a36:	0f be       	out	0x3f, r0	; 63
 a38:	cd bf       	out	0x3d, r28	; 61
 a3a:	cf 91       	pop	r28
 a3c:	df 91       	pop	r29
 a3e:	08 95       	ret

00000a40 <MDIO_Error_State_SetNippleValue>:
/*Set Nipple Direction Function */

/*Set Nipple Values Function */
Error_State MDIO_Error_State_SetNippleValue(u8 Copy_u8PinStart,u8 Copy_u8PortNumber,u8 Copy_u8Value)
{
 a40:	df 93       	push	r29
 a42:	cf 93       	push	r28
 a44:	00 d0       	rcall	.+0      	; 0xa46 <MDIO_Error_State_SetNippleValue+0x6>
 a46:	00 d0       	rcall	.+0      	; 0xa48 <MDIO_Error_State_SetNippleValue+0x8>
 a48:	00 d0       	rcall	.+0      	; 0xa4a <MDIO_Error_State_SetNippleValue+0xa>
 a4a:	cd b7       	in	r28, 0x3d	; 61
 a4c:	de b7       	in	r29, 0x3e	; 62
 a4e:	8a 83       	std	Y+2, r24	; 0x02
 a50:	6b 83       	std	Y+3, r22	; 0x03
 a52:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
 a54:	81 e0       	ldi	r24, 0x01	; 1
 a56:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinStart<=4)
 a58:	8a 81       	ldd	r24, Y+2	; 0x02
 a5a:	85 30       	cpi	r24, 0x05	; 5
 a5c:	08 f0       	brcs	.+2      	; 0xa60 <MDIO_Error_State_SetNippleValue+0x20>
 a5e:	97 c0       	rjmp	.+302    	; 0xb8e <MDIO_Error_State_SetNippleValue+0x14e>
	{
		switch(Copy_u8PortNumber)
 a60:	8b 81       	ldd	r24, Y+3	; 0x03
 a62:	28 2f       	mov	r18, r24
 a64:	30 e0       	ldi	r19, 0x00	; 0
 a66:	3e 83       	std	Y+6, r19	; 0x06
 a68:	2d 83       	std	Y+5, r18	; 0x05
 a6a:	8d 81       	ldd	r24, Y+5	; 0x05
 a6c:	9e 81       	ldd	r25, Y+6	; 0x06
 a6e:	81 30       	cpi	r24, 0x01	; 1
 a70:	91 05       	cpc	r25, r1
 a72:	a1 f1       	breq	.+104    	; 0xadc <MDIO_Error_State_SetNippleValue+0x9c>
 a74:	2d 81       	ldd	r18, Y+5	; 0x05
 a76:	3e 81       	ldd	r19, Y+6	; 0x06
 a78:	22 30       	cpi	r18, 0x02	; 2
 a7a:	31 05       	cpc	r19, r1
 a7c:	2c f4       	brge	.+10     	; 0xa88 <MDIO_Error_State_SetNippleValue+0x48>
 a7e:	8d 81       	ldd	r24, Y+5	; 0x05
 a80:	9e 81       	ldd	r25, Y+6	; 0x06
 a82:	00 97       	sbiw	r24, 0x00	; 0
 a84:	71 f0       	breq	.+28     	; 0xaa2 <MDIO_Error_State_SetNippleValue+0x62>
 a86:	81 c0       	rjmp	.+258    	; 0xb8a <MDIO_Error_State_SetNippleValue+0x14a>
 a88:	2d 81       	ldd	r18, Y+5	; 0x05
 a8a:	3e 81       	ldd	r19, Y+6	; 0x06
 a8c:	22 30       	cpi	r18, 0x02	; 2
 a8e:	31 05       	cpc	r19, r1
 a90:	09 f4       	brne	.+2      	; 0xa94 <MDIO_Error_State_SetNippleValue+0x54>
 a92:	41 c0       	rjmp	.+130    	; 0xb16 <MDIO_Error_State_SetNippleValue+0xd6>
 a94:	8d 81       	ldd	r24, Y+5	; 0x05
 a96:	9e 81       	ldd	r25, Y+6	; 0x06
 a98:	83 30       	cpi	r24, 0x03	; 3
 a9a:	91 05       	cpc	r25, r1
 a9c:	09 f4       	brne	.+2      	; 0xaa0 <MDIO_Error_State_SetNippleValue+0x60>
 a9e:	58 c0       	rjmp	.+176    	; 0xb50 <MDIO_Error_State_SetNippleValue+0x110>
 aa0:	74 c0       	rjmp	.+232    	; 0xb8a <MDIO_Error_State_SetNippleValue+0x14a>
		case MDIO_PORTA:
		/*for(u8 i=Copy_u8PinStart;i<=7;i++)
		{
			CLR_BIT(PORTA,i);
		}*/
			PORTA&=(~(0x0F<<Copy_u8PinStart));
 aa2:	ab e3       	ldi	r26, 0x3B	; 59
 aa4:	b0 e0       	ldi	r27, 0x00	; 0
 aa6:	eb e3       	ldi	r30, 0x3B	; 59
 aa8:	f0 e0       	ldi	r31, 0x00	; 0
 aaa:	80 81       	ld	r24, Z
 aac:	48 2f       	mov	r20, r24
 aae:	8a 81       	ldd	r24, Y+2	; 0x02
 ab0:	28 2f       	mov	r18, r24
 ab2:	30 e0       	ldi	r19, 0x00	; 0
 ab4:	8f e0       	ldi	r24, 0x0F	; 15
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	02 2e       	mov	r0, r18
 aba:	02 c0       	rjmp	.+4      	; 0xac0 <MDIO_Error_State_SetNippleValue+0x80>
 abc:	88 0f       	add	r24, r24
 abe:	99 1f       	adc	r25, r25
 ac0:	0a 94       	dec	r0
 ac2:	e2 f7       	brpl	.-8      	; 0xabc <MDIO_Error_State_SetNippleValue+0x7c>
 ac4:	80 95       	com	r24
 ac6:	84 23       	and	r24, r20
 ac8:	8c 93       	st	X, r24
			PORTA|=Copy_u8Value;
 aca:	ab e3       	ldi	r26, 0x3B	; 59
 acc:	b0 e0       	ldi	r27, 0x00	; 0
 ace:	eb e3       	ldi	r30, 0x3B	; 59
 ad0:	f0 e0       	ldi	r31, 0x00	; 0
 ad2:	90 81       	ld	r25, Z
 ad4:	8c 81       	ldd	r24, Y+4	; 0x04
 ad6:	89 2b       	or	r24, r25
 ad8:	8c 93       	st	X, r24
 ada:	5a c0       	rjmp	.+180    	; 0xb90 <MDIO_Error_State_SetNippleValue+0x150>
		case MDIO_PORTB:
			/*for(u8 i=Copy_u8PinStart;i<=Copy_u8PinEnd;i++)
		{
			CLR_BIT(PORTA,i);
		}*/
			PORTB&=(~(0x0F<<Copy_u8PinStart));
 adc:	a8 e3       	ldi	r26, 0x38	; 56
 ade:	b0 e0       	ldi	r27, 0x00	; 0
 ae0:	e8 e3       	ldi	r30, 0x38	; 56
 ae2:	f0 e0       	ldi	r31, 0x00	; 0
 ae4:	80 81       	ld	r24, Z
 ae6:	48 2f       	mov	r20, r24
 ae8:	8a 81       	ldd	r24, Y+2	; 0x02
 aea:	28 2f       	mov	r18, r24
 aec:	30 e0       	ldi	r19, 0x00	; 0
 aee:	8f e0       	ldi	r24, 0x0F	; 15
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	02 2e       	mov	r0, r18
 af4:	02 c0       	rjmp	.+4      	; 0xafa <MDIO_Error_State_SetNippleValue+0xba>
 af6:	88 0f       	add	r24, r24
 af8:	99 1f       	adc	r25, r25
 afa:	0a 94       	dec	r0
 afc:	e2 f7       	brpl	.-8      	; 0xaf6 <MDIO_Error_State_SetNippleValue+0xb6>
 afe:	80 95       	com	r24
 b00:	84 23       	and	r24, r20
 b02:	8c 93       	st	X, r24
			PORTB|=Copy_u8Value;
 b04:	a8 e3       	ldi	r26, 0x38	; 56
 b06:	b0 e0       	ldi	r27, 0x00	; 0
 b08:	e8 e3       	ldi	r30, 0x38	; 56
 b0a:	f0 e0       	ldi	r31, 0x00	; 0
 b0c:	90 81       	ld	r25, Z
 b0e:	8c 81       	ldd	r24, Y+4	; 0x04
 b10:	89 2b       	or	r24, r25
 b12:	8c 93       	st	X, r24
 b14:	3d c0       	rjmp	.+122    	; 0xb90 <MDIO_Error_State_SetNippleValue+0x150>
		case MDIO_PORTC:
			/*for(u8 i=Copy_u8PinStart;i<=Copy_u8PinEnd;i++)
		{
			CLR_BIT(PORTA,i);
		}*/
			PORTC&=(~(0x0F<<Copy_u8PinStart));
 b16:	a5 e3       	ldi	r26, 0x35	; 53
 b18:	b0 e0       	ldi	r27, 0x00	; 0
 b1a:	e5 e3       	ldi	r30, 0x35	; 53
 b1c:	f0 e0       	ldi	r31, 0x00	; 0
 b1e:	80 81       	ld	r24, Z
 b20:	48 2f       	mov	r20, r24
 b22:	8a 81       	ldd	r24, Y+2	; 0x02
 b24:	28 2f       	mov	r18, r24
 b26:	30 e0       	ldi	r19, 0x00	; 0
 b28:	8f e0       	ldi	r24, 0x0F	; 15
 b2a:	90 e0       	ldi	r25, 0x00	; 0
 b2c:	02 2e       	mov	r0, r18
 b2e:	02 c0       	rjmp	.+4      	; 0xb34 <MDIO_Error_State_SetNippleValue+0xf4>
 b30:	88 0f       	add	r24, r24
 b32:	99 1f       	adc	r25, r25
 b34:	0a 94       	dec	r0
 b36:	e2 f7       	brpl	.-8      	; 0xb30 <MDIO_Error_State_SetNippleValue+0xf0>
 b38:	80 95       	com	r24
 b3a:	84 23       	and	r24, r20
 b3c:	8c 93       	st	X, r24
			PORTC|=Copy_u8Value;
 b3e:	a5 e3       	ldi	r26, 0x35	; 53
 b40:	b0 e0       	ldi	r27, 0x00	; 0
 b42:	e5 e3       	ldi	r30, 0x35	; 53
 b44:	f0 e0       	ldi	r31, 0x00	; 0
 b46:	90 81       	ld	r25, Z
 b48:	8c 81       	ldd	r24, Y+4	; 0x04
 b4a:	89 2b       	or	r24, r25
 b4c:	8c 93       	st	X, r24
 b4e:	20 c0       	rjmp	.+64     	; 0xb90 <MDIO_Error_State_SetNippleValue+0x150>
		case MDIO_PORTD:
			/*for(u8 i=Copy_u8PinStart;i<=Copy_u8PinEnd;i++)
		{
			CLR_BIT(PORTA,i);
		}*/
			PORTD&=(~(0x0F<<Copy_u8PinStart));
 b50:	a2 e3       	ldi	r26, 0x32	; 50
 b52:	b0 e0       	ldi	r27, 0x00	; 0
 b54:	e2 e3       	ldi	r30, 0x32	; 50
 b56:	f0 e0       	ldi	r31, 0x00	; 0
 b58:	80 81       	ld	r24, Z
 b5a:	48 2f       	mov	r20, r24
 b5c:	8a 81       	ldd	r24, Y+2	; 0x02
 b5e:	28 2f       	mov	r18, r24
 b60:	30 e0       	ldi	r19, 0x00	; 0
 b62:	8f e0       	ldi	r24, 0x0F	; 15
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	02 2e       	mov	r0, r18
 b68:	02 c0       	rjmp	.+4      	; 0xb6e <MDIO_Error_State_SetNippleValue+0x12e>
 b6a:	88 0f       	add	r24, r24
 b6c:	99 1f       	adc	r25, r25
 b6e:	0a 94       	dec	r0
 b70:	e2 f7       	brpl	.-8      	; 0xb6a <MDIO_Error_State_SetNippleValue+0x12a>
 b72:	80 95       	com	r24
 b74:	84 23       	and	r24, r20
 b76:	8c 93       	st	X, r24
			PORTD|=Copy_u8Value;
 b78:	a2 e3       	ldi	r26, 0x32	; 50
 b7a:	b0 e0       	ldi	r27, 0x00	; 0
 b7c:	e2 e3       	ldi	r30, 0x32	; 50
 b7e:	f0 e0       	ldi	r31, 0x00	; 0
 b80:	90 81       	ld	r25, Z
 b82:	8c 81       	ldd	r24, Y+4	; 0x04
 b84:	89 2b       	or	r24, r25
 b86:	8c 93       	st	X, r24
 b88:	03 c0       	rjmp	.+6      	; 0xb90 <MDIO_Error_State_SetNippleValue+0x150>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
 b8a:	19 82       	std	Y+1, r1	; 0x01
 b8c:	01 c0       	rjmp	.+2      	; 0xb90 <MDIO_Error_State_SetNippleValue+0x150>
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
 b8e:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState;
 b90:	89 81       	ldd	r24, Y+1	; 0x01
}
 b92:	26 96       	adiw	r28, 0x06	; 6
 b94:	0f b6       	in	r0, 0x3f	; 63
 b96:	f8 94       	cli
 b98:	de bf       	out	0x3e, r29	; 62
 b9a:	0f be       	out	0x3f, r0	; 63
 b9c:	cd bf       	out	0x3d, r28	; 61
 b9e:	cf 91       	pop	r28
 ba0:	df 91       	pop	r29
 ba2:	08 95       	ret

00000ba4 <HLED_VidInit>:
#include"..\..\LIB\LSTD_TYPES.h"
#include"..\..\MCAL\MDIO\MDIO_Interface.h"
#include"HLED_Interface.h"

void HLED_VidInit(LED_t *Copy_Led)
{
 ba4:	df 93       	push	r29
 ba6:	cf 93       	push	r28
 ba8:	00 d0       	rcall	.+0      	; 0xbaa <HLED_VidInit+0x6>
 baa:	cd b7       	in	r28, 0x3d	; 61
 bac:	de b7       	in	r29, 0x3e	; 62
 bae:	9a 83       	std	Y+2, r25	; 0x02
 bb0:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinDirection(Copy_Led->Copy_u8Pin,Copy_Led->Copy_u8Port,PIN_OUTPUT);
 bb2:	e9 81       	ldd	r30, Y+1	; 0x01
 bb4:	fa 81       	ldd	r31, Y+2	; 0x02
 bb6:	81 81       	ldd	r24, Z+1	; 0x01
 bb8:	e9 81       	ldd	r30, Y+1	; 0x01
 bba:	fa 81       	ldd	r31, Y+2	; 0x02
 bbc:	90 81       	ld	r25, Z
 bbe:	69 2f       	mov	r22, r25
 bc0:	41 e0       	ldi	r20, 0x01	; 1
 bc2:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <MDIO_Error_State_SetPinDirection>
}
 bc6:	0f 90       	pop	r0
 bc8:	0f 90       	pop	r0
 bca:	cf 91       	pop	r28
 bcc:	df 91       	pop	r29
 bce:	08 95       	ret

00000bd0 <HLED_VidLed_On>:
void HLED_VidLed_On(LED_t *Copy_Led)
{
 bd0:	df 93       	push	r29
 bd2:	cf 93       	push	r28
 bd4:	00 d0       	rcall	.+0      	; 0xbd6 <HLED_VidLed_On+0x6>
 bd6:	cd b7       	in	r28, 0x3d	; 61
 bd8:	de b7       	in	r29, 0x3e	; 62
 bda:	9a 83       	std	Y+2, r25	; 0x02
 bdc:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
 bde:	e9 81       	ldd	r30, Y+1	; 0x01
 be0:	fa 81       	ldd	r31, Y+2	; 0x02
 be2:	81 81       	ldd	r24, Z+1	; 0x01
 be4:	e9 81       	ldd	r30, Y+1	; 0x01
 be6:	fa 81       	ldd	r31, Y+2	; 0x02
 be8:	90 81       	ld	r25, Z
 bea:	69 2f       	mov	r22, r25
 bec:	41 e0       	ldi	r20, 0x01	; 1
 bee:	0e 94 3d 03 	call	0x67a	; 0x67a <MDIO_Error_State_SetPinValue>
}
 bf2:	0f 90       	pop	r0
 bf4:	0f 90       	pop	r0
 bf6:	cf 91       	pop	r28
 bf8:	df 91       	pop	r29
 bfa:	08 95       	ret

00000bfc <HLED_VidLed_Off>:
void HLED_VidLed_Off(LED_t *Copy_Led)
{
 bfc:	df 93       	push	r29
 bfe:	cf 93       	push	r28
 c00:	00 d0       	rcall	.+0      	; 0xc02 <HLED_VidLed_Off+0x6>
 c02:	cd b7       	in	r28, 0x3d	; 61
 c04:	de b7       	in	r29, 0x3e	; 62
 c06:	9a 83       	std	Y+2, r25	; 0x02
 c08:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8Pin,Copy_Led->Copy_u8Port,PIN_LOW);
 c0a:	e9 81       	ldd	r30, Y+1	; 0x01
 c0c:	fa 81       	ldd	r31, Y+2	; 0x02
 c0e:	81 81       	ldd	r24, Z+1	; 0x01
 c10:	e9 81       	ldd	r30, Y+1	; 0x01
 c12:	fa 81       	ldd	r31, Y+2	; 0x02
 c14:	90 81       	ld	r25, Z
 c16:	69 2f       	mov	r22, r25
 c18:	40 e0       	ldi	r20, 0x00	; 0
 c1a:	0e 94 3d 03 	call	0x67a	; 0x67a <MDIO_Error_State_SetPinValue>
}
 c1e:	0f 90       	pop	r0
 c20:	0f 90       	pop	r0
 c22:	cf 91       	pop	r28
 c24:	df 91       	pop	r29
 c26:	08 95       	ret

00000c28 <HLED_VidLed_Toggle>:
void HLED_VidLed_Toggle(LED_t *Copy_Led)
{
 c28:	df 93       	push	r29
 c2a:	cf 93       	push	r28
 c2c:	00 d0       	rcall	.+0      	; 0xc2e <HLED_VidLed_Toggle+0x6>
 c2e:	cd b7       	in	r28, 0x3d	; 61
 c30:	de b7       	in	r29, 0x3e	; 62
 c32:	9a 83       	std	Y+2, r25	; 0x02
 c34:	89 83       	std	Y+1, r24	; 0x01
	/*Toggle Function*/
	static u8 Flag=0;
	if(Flag==0)
 c36:	80 91 79 00 	lds	r24, 0x0079
 c3a:	88 23       	and	r24, r24
 c3c:	69 f4       	brne	.+26     	; 0xc58 <HLED_VidLed_Toggle+0x30>
	{
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
 c3e:	e9 81       	ldd	r30, Y+1	; 0x01
 c40:	fa 81       	ldd	r31, Y+2	; 0x02
 c42:	81 81       	ldd	r24, Z+1	; 0x01
 c44:	e9 81       	ldd	r30, Y+1	; 0x01
 c46:	fa 81       	ldd	r31, Y+2	; 0x02
 c48:	90 81       	ld	r25, Z
 c4a:	69 2f       	mov	r22, r25
 c4c:	41 e0       	ldi	r20, 0x01	; 1
 c4e:	0e 94 3d 03 	call	0x67a	; 0x67a <MDIO_Error_State_SetPinValue>
	Flag=1;
 c52:	81 e0       	ldi	r24, 0x01	; 1
 c54:	80 93 79 00 	sts	0x0079, r24
	}
	if(Flag==1)
 c58:	80 91 79 00 	lds	r24, 0x0079
 c5c:	81 30       	cpi	r24, 0x01	; 1
 c5e:	61 f4       	brne	.+24     	; 0xc78 <HLED_VidLed_Toggle+0x50>
	{
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8Pin,Copy_Led->Copy_u8Port,PIN_LOW);
 c60:	e9 81       	ldd	r30, Y+1	; 0x01
 c62:	fa 81       	ldd	r31, Y+2	; 0x02
 c64:	81 81       	ldd	r24, Z+1	; 0x01
 c66:	e9 81       	ldd	r30, Y+1	; 0x01
 c68:	fa 81       	ldd	r31, Y+2	; 0x02
 c6a:	90 81       	ld	r25, Z
 c6c:	69 2f       	mov	r22, r25
 c6e:	40 e0       	ldi	r20, 0x00	; 0
 c70:	0e 94 3d 03 	call	0x67a	; 0x67a <MDIO_Error_State_SetPinValue>
	Flag=0;
 c74:	10 92 79 00 	sts	0x0079, r1
	}

}
 c78:	0f 90       	pop	r0
 c7a:	0f 90       	pop	r0
 c7c:	cf 91       	pop	r28
 c7e:	df 91       	pop	r29
 c80:	08 95       	ret

00000c82 <main>:
void App_LED1(void);
void App_LED2(void);
void App_LED3(void);

int main(void)
{
 c82:	df 93       	push	r29
 c84:	cf 93       	push	r28
 c86:	cd b7       	in	r28, 0x3d	; 61
 c88:	de b7       	in	r29, 0x3e	; 62
	/*DIO Pins Initialization*/
	MDIO_Error_State_SetPinDirection(PIN0,MDIO_PORTD,PIN_OUTPUT);
 c8a:	80 e0       	ldi	r24, 0x00	; 0
 c8c:	63 e0       	ldi	r22, 0x03	; 3
 c8e:	41 e0       	ldi	r20, 0x01	; 1
 c90:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(PIN1,MDIO_PORTD,PIN_OUTPUT);
 c94:	81 e0       	ldi	r24, 0x01	; 1
 c96:	63 e0       	ldi	r22, 0x03	; 3
 c98:	41 e0       	ldi	r20, 0x01	; 1
 c9a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(PIN2,MDIO_PORTD,PIN_OUTPUT);
 c9e:	82 e0       	ldi	r24, 0x02	; 2
 ca0:	63 e0       	ldi	r22, 0x03	; 3
 ca2:	41 e0       	ldi	r20, 0x01	; 1
 ca4:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <MDIO_Error_State_SetPinDirection>

	/* Create Tasks*/
	RTOS_VidCreateTask(App_LED1,1000,0);
 ca8:	82 e7       	ldi	r24, 0x72	; 114
 caa:	96 e0       	ldi	r25, 0x06	; 6
 cac:	48 ee       	ldi	r20, 0xE8	; 232
 cae:	53 e0       	ldi	r21, 0x03	; 3
 cb0:	60 e0       	ldi	r22, 0x00	; 0
 cb2:	70 e0       	ldi	r23, 0x00	; 0
 cb4:	20 e0       	ldi	r18, 0x00	; 0
 cb6:	0e 94 54 00 	call	0xa8	; 0xa8 <RTOS_VidCreateTask>
	RTOS_VidCreateTask(App_LED2,2000,1);
 cba:	8d e8       	ldi	r24, 0x8D	; 141
 cbc:	96 e0       	ldi	r25, 0x06	; 6
 cbe:	40 ed       	ldi	r20, 0xD0	; 208
 cc0:	57 e0       	ldi	r21, 0x07	; 7
 cc2:	60 e0       	ldi	r22, 0x00	; 0
 cc4:	70 e0       	ldi	r23, 0x00	; 0
 cc6:	21 e0       	ldi	r18, 0x01	; 1
 cc8:	0e 94 54 00 	call	0xa8	; 0xa8 <RTOS_VidCreateTask>
	RTOS_VidCreateTask(App_LED3,3000,2);
 ccc:	88 ea       	ldi	r24, 0xA8	; 168
 cce:	96 e0       	ldi	r25, 0x06	; 6
 cd0:	48 eb       	ldi	r20, 0xB8	; 184
 cd2:	5b e0       	ldi	r21, 0x0B	; 11
 cd4:	60 e0       	ldi	r22, 0x00	; 0
 cd6:	70 e0       	ldi	r23, 0x00	; 0
 cd8:	22 e0       	ldi	r18, 0x02	; 2
 cda:	0e 94 54 00 	call	0xa8	; 0xa8 <RTOS_VidCreateTask>

	/*RTOS Initialization*/
	RTOS_VidInit();
 cde:	0e 94 3e 00 	call	0x7c	; 0x7c <RTOS_VidInit>
 ce2:	ff cf       	rjmp	.-2      	; 0xce2 <main+0x60>

00000ce4 <App_LED1>:

	}
	return 0;
}
void App_LED1(void)
{
 ce4:	df 93       	push	r29
 ce6:	cf 93       	push	r28
 ce8:	cd b7       	in	r28, 0x3d	; 61
 cea:	de b7       	in	r29, 0x3e	; 62
	static u8 Loc_u8Flag=0;
	if(Loc_u8Flag==0)
 cec:	80 91 7a 00 	lds	r24, 0x007A
 cf0:	88 23       	and	r24, r24
 cf2:	49 f4       	brne	.+18     	; 0xd06 <App_LED1+0x22>
	{
		MDIO_Error_State_SetPinValue(PIN0,MDIO_PORTD,PIN_HIGH);
 cf4:	80 e0       	ldi	r24, 0x00	; 0
 cf6:	63 e0       	ldi	r22, 0x03	; 3
 cf8:	41 e0       	ldi	r20, 0x01	; 1
 cfa:	0e 94 3d 03 	call	0x67a	; 0x67a <MDIO_Error_State_SetPinValue>
		Loc_u8Flag=1;
 cfe:	81 e0       	ldi	r24, 0x01	; 1
 d00:	80 93 7a 00 	sts	0x007A, r24
 d04:	07 c0       	rjmp	.+14     	; 0xd14 <App_LED1+0x30>
	}
	else
	{
		MDIO_Error_State_SetPinValue(PIN0,MDIO_PORTD,PIN_LOW);
 d06:	80 e0       	ldi	r24, 0x00	; 0
 d08:	63 e0       	ldi	r22, 0x03	; 3
 d0a:	40 e0       	ldi	r20, 0x00	; 0
 d0c:	0e 94 3d 03 	call	0x67a	; 0x67a <MDIO_Error_State_SetPinValue>
		Loc_u8Flag=0;
 d10:	10 92 7a 00 	sts	0x007A, r1
	}
}
 d14:	cf 91       	pop	r28
 d16:	df 91       	pop	r29
 d18:	08 95       	ret

00000d1a <App_LED2>:
void App_LED2(void)
{
 d1a:	df 93       	push	r29
 d1c:	cf 93       	push	r28
 d1e:	cd b7       	in	r28, 0x3d	; 61
 d20:	de b7       	in	r29, 0x3e	; 62
	static u8 Loc_u8Flag=0;
	if(Loc_u8Flag==0)
 d22:	80 91 7b 00 	lds	r24, 0x007B
 d26:	88 23       	and	r24, r24
 d28:	49 f4       	brne	.+18     	; 0xd3c <App_LED2+0x22>
	{
		MDIO_Error_State_SetPinValue(PIN1,MDIO_PORTD,PIN_HIGH);
 d2a:	81 e0       	ldi	r24, 0x01	; 1
 d2c:	63 e0       	ldi	r22, 0x03	; 3
 d2e:	41 e0       	ldi	r20, 0x01	; 1
 d30:	0e 94 3d 03 	call	0x67a	; 0x67a <MDIO_Error_State_SetPinValue>
		Loc_u8Flag=1;
 d34:	81 e0       	ldi	r24, 0x01	; 1
 d36:	80 93 7b 00 	sts	0x007B, r24
 d3a:	07 c0       	rjmp	.+14     	; 0xd4a <App_LED2+0x30>
	}
	else
	{
		MDIO_Error_State_SetPinValue(PIN1,MDIO_PORTD,PIN_LOW);
 d3c:	81 e0       	ldi	r24, 0x01	; 1
 d3e:	63 e0       	ldi	r22, 0x03	; 3
 d40:	40 e0       	ldi	r20, 0x00	; 0
 d42:	0e 94 3d 03 	call	0x67a	; 0x67a <MDIO_Error_State_SetPinValue>
		Loc_u8Flag=0;
 d46:	10 92 7b 00 	sts	0x007B, r1
	}
}
 d4a:	cf 91       	pop	r28
 d4c:	df 91       	pop	r29
 d4e:	08 95       	ret

00000d50 <App_LED3>:
void App_LED3(void)
{
 d50:	df 93       	push	r29
 d52:	cf 93       	push	r28
 d54:	cd b7       	in	r28, 0x3d	; 61
 d56:	de b7       	in	r29, 0x3e	; 62
	static u8 Loc_u8Flag=0;
	if(Loc_u8Flag==0)
 d58:	80 91 7c 00 	lds	r24, 0x007C
 d5c:	88 23       	and	r24, r24
 d5e:	49 f4       	brne	.+18     	; 0xd72 <App_LED3+0x22>
	{
		MDIO_Error_State_SetPinValue(PIN2,MDIO_PORTD,PIN_HIGH);
 d60:	82 e0       	ldi	r24, 0x02	; 2
 d62:	63 e0       	ldi	r22, 0x03	; 3
 d64:	41 e0       	ldi	r20, 0x01	; 1
 d66:	0e 94 3d 03 	call	0x67a	; 0x67a <MDIO_Error_State_SetPinValue>
		Loc_u8Flag=1;
 d6a:	81 e0       	ldi	r24, 0x01	; 1
 d6c:	80 93 7c 00 	sts	0x007C, r24
 d70:	07 c0       	rjmp	.+14     	; 0xd80 <App_LED3+0x30>
	}
	else
	{
		MDIO_Error_State_SetPinValue(PIN2,MDIO_PORTD,PIN_LOW);
 d72:	82 e0       	ldi	r24, 0x02	; 2
 d74:	63 e0       	ldi	r22, 0x03	; 3
 d76:	40 e0       	ldi	r20, 0x00	; 0
 d78:	0e 94 3d 03 	call	0x67a	; 0x67a <MDIO_Error_State_SetPinValue>
		Loc_u8Flag=0;
 d7c:	10 92 7c 00 	sts	0x007C, r1
	}
}
 d80:	cf 91       	pop	r28
 d82:	df 91       	pop	r29
 d84:	08 95       	ret

00000d86 <__udivmodsi4>:
 d86:	a1 e2       	ldi	r26, 0x21	; 33
 d88:	1a 2e       	mov	r1, r26
 d8a:	aa 1b       	sub	r26, r26
 d8c:	bb 1b       	sub	r27, r27
 d8e:	fd 01       	movw	r30, r26
 d90:	0d c0       	rjmp	.+26     	; 0xdac <__udivmodsi4_ep>

00000d92 <__udivmodsi4_loop>:
 d92:	aa 1f       	adc	r26, r26
 d94:	bb 1f       	adc	r27, r27
 d96:	ee 1f       	adc	r30, r30
 d98:	ff 1f       	adc	r31, r31
 d9a:	a2 17       	cp	r26, r18
 d9c:	b3 07       	cpc	r27, r19
 d9e:	e4 07       	cpc	r30, r20
 da0:	f5 07       	cpc	r31, r21
 da2:	20 f0       	brcs	.+8      	; 0xdac <__udivmodsi4_ep>
 da4:	a2 1b       	sub	r26, r18
 da6:	b3 0b       	sbc	r27, r19
 da8:	e4 0b       	sbc	r30, r20
 daa:	f5 0b       	sbc	r31, r21

00000dac <__udivmodsi4_ep>:
 dac:	66 1f       	adc	r22, r22
 dae:	77 1f       	adc	r23, r23
 db0:	88 1f       	adc	r24, r24
 db2:	99 1f       	adc	r25, r25
 db4:	1a 94       	dec	r1
 db6:	69 f7       	brne	.-38     	; 0xd92 <__udivmodsi4_loop>
 db8:	60 95       	com	r22
 dba:	70 95       	com	r23
 dbc:	80 95       	com	r24
 dbe:	90 95       	com	r25
 dc0:	9b 01       	movw	r18, r22
 dc2:	ac 01       	movw	r20, r24
 dc4:	bd 01       	movw	r22, r26
 dc6:	cf 01       	movw	r24, r30
 dc8:	08 95       	ret

00000dca <_exit>:
 dca:	f8 94       	cli

00000dcc <__stop_program>:
 dcc:	ff cf       	rjmp	.-2      	; 0xdcc <__stop_program>
